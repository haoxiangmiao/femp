#ifndef MSH_HPP
#define MSH_HPP

#include "parser.h++"


class MshParser: protected Parser
{
	protected:
		enum Lexer {
			LEX_ERROR,
			LEX_OPEN_MESH_FORMAT,
			LEX_CLOSE_MESH_FORMAT,
			LEX_OPEN_NODES,
			LEX_CLOSE_NODES,
			LEX_OPEN_ELEMENTS,
			LEX_CLOSE_ELEMENTS,
			LEX_OPEN_PHYSICAL_NAMES,
			LEX_CLOSE_PHYSICAL_NAMES,
			LEX_OPEN_NODE_DATA,
			LEX_CLOSE_NODE_DATA,
			LEX_OPEN_ELEMENT_DATA,
			LEX_CLOSE_ELEMENT_DATA,
			LEX_OPEN_ELEMENT_NODE_DATA,
			LEX_CLOSE_ELEMENT_NODE_DATA,
			LEX_INDEX,
			LEX_NUMBER,

			// the element types
			LEX_LINE2,
			LEX_TRIANGLE3,
			LEX_QUADRANGLE4,
			LEX_TETRAHEDRON4,
			LEX_HEXAHEDRON8,
			LEX_PRISM6,
			LEX_PYRAMID5,
			LEX_LINE3,
			LEX_TRIANGLE6,
			LEX_QUADRANGLE9,
			LEX_TETRAHEDRON10,
			LEX_HEXAHEDRON27,
			LEX_PRISM18,
			LEX_PYRAMID14,
			LEX_POINT,
			LEX_QUADRANGLE8,
			LEX_HEXAHEDRON20,
			LEX_PRISM15,
			LEX_PYRAMID13,
			LEX_ITRIANGLE9,
			LEX_TRIANGLE10,
			LEX_ITRIANGLE12,
			LEX_TRIANGLE15,
			LEX_ITRIANGLE15,
			LEX_TRIANGLE21,
			LEX_EDGE4,
			LEX_EDGE5,
			LEX_EDGE6,
			LEX_TETRAHEDRON20,
			LEX_TETRAHEDRON35,
			LEX_TETRAHEDRON56,

			LEX_TOKEN_0,
			LEX_TOKEN_1,
			LEX_TOKEN_2,
			LEX_TOKEN_3,

			LEX_EOL,
			LEX_EOF,

			LEX_VERSION_2_1,
			LEX_FILE_TYPE,
			LEX_DATA_SIZE,
			LEX_UNKNOWN_TOKEN
			};
		union value {
			size_t	index;
			double	number;
		} val;

	public:
		MshParser();
		~MshParser();

		enum Error parse(std::string file_name, fem::Model &model);

	protected:
		enum Lexer lexer();
		void setIndex();
};


#endif
