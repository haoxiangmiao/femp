#ifndef ANALYSIS_RESULT_HPP
#define ANALYSIS_RESULT_HPP

#include <map>
#include <vector>

#include <boost/tuple/tuple.hpp>
#include <iostream>

#include "../lalib/Matrix.h++"
#include "../lalib/Vector.h++"

#include "RecoveredValues.h++"


namespace fem
{


/**
Class designed to store all the relevant analysis results which are generated by fem::Analysis and are needed in post-processing
**/
template<typename Scalar>
struct AnalysisResult 
{
	lalib::Matrix<Scalar,lalib::SparseDOK> K;
	lalib::Vector<Scalar> f;
	lalib::Vector<Scalar> d;

	std::map<size_t, boost::tuple<size_t,size_t,size_t> > lm;

	// map between a element reference and the element's recovered values
	std::vector<RecoveredValues<Scalar> >	recovered_values;
	typename RecoveredValues<Scalar>::Values maximum, minimum;


	void clear();
};



template<typename Scalar>
void AnalysisResult<Scalar>::clear()
{
	K.clear();
	f.clear();
	d.clear();

	lm.clear();
	recovered_values.clear();

	maximum = {0,0,0,0,0,0};
	minimum = {0,0,0,0,0,0};
}


}	// namespace fem


#endif
