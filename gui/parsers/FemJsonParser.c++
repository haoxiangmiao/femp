/* Generated by re2c 0.13.5 on Tue Aug  9 18:52:17 2011 */
#line 1 "parsers/FemJsonParser.c++.re2c"
#include "FemJsonParser.h++"

#include <iostream>
#include <string.h>	// for memcpy

#include <boost/lexical_cast.hpp>

#include "../fem/FemException.h++"


FemJsonParser::FemJsonParser()
{
	limit = buffer;
	tok = limit;
	pos = limit;
	marker = limit;
	*limit = '\000';
	line_number = 0;

	setParserTable();

	// resets the error message
	this->error.code = Error::Type::ERR_OK;
	this->error.message.clear();
}


void FemJsonParser::operator() (std::istream &file, fem::Model &model)
{
	parse(file,model);
}


enum FemJsonParser::Error::Type  FemJsonParser::parse(std::istream &file, fem::Model &model)
{
	ss.push(NT_START);	// initializes the symbol stack with  the start symbol

	enum TerminalTokens terminal_token = lexer(file);
	int nonterminal_token;

	// resets the error message
	this->error.code = Error::Type::ERR_OK;
	this->error.message.clear();


	while(!ss.empty())
	{
		if(terminal_token == ss.top())
		{
			ss.pop();
			//std::cout << names(terminal_token) << " << ";
			terminal_token = lexer(file);
			//std::cout << names(terminal_token) << std::endl;
		}
		else
		{
			nonterminal_token = ss.top();
			ss.pop();
			//std::cout << "table[\t" << names(nonterminal_token) << "\t]\t[\t" << names(terminal_token) << "\t]" << std::endl;
			switch( table[(enum NonTerminalTokens)nonterminal_token][terminal_token] )	
			{
				case PR_LABEL:
					ss.push(NT_LABEL_SET);
					ss.push(TT_TEXT_STRING);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_LABEL);
					break;

				case PR_LABEL_SET:
					label = temp_token;
					break;

				case PR_VECTOR3D:
					ss.push(NT_VECTOR3D_SET);
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NUMBER);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NUMBER);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NUMBER);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_VECTOR3D_SET:
					{
						fem::point p;
						p.data[2] = temp_float.back();
						temp_float.pop_back();
						p.data[1] = temp_float.back();
						temp_float.pop_back();
						p.data[0] = temp_float.back();
						temp_float.pop_back();

						temp_point.push_back(p);
					}
					break;

				case PR_REFERENCE_1:
					ss.push(NT_REFERENCE_SET);
					ss.push(TT_NATURAL_NUMBER);
					break;

				case PR_REFERENCE_SET:
					try
					{
						reference.push_back(boost::lexical_cast<size_t>(temp_token));
						temp_token.clear();
					}
					catch(boost::bad_lexical_cast &e)
					{
						std::cerr << "PR_REFERENCE_SET" << e.what() << std::endl;
						std::cerr << temp_token << std::endl;
					}
					break;

				case PR_REFERENCE_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_REFERENCE_FOLLOW);
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_REFERENCE_FOLLOW_1:
					ss.push(NT_REFERENCE_FOLLOW);
					ss.push(NT_REFERENCE);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_REFERENCE_FOLLOW_2:
					break;

				case PR_MULTI_REFERENCE_1:
					ss.push(NT_REFERENCE);
					break;

				case PR_MULTI_REFERENCE_2:
					ss.push(NT_MULTI_REFERENCE_SET);
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_REFERENCE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_MULTI_REFERENCE_SET:
					{
						size_t last = reference.back();
						reference.pop_back();
						size_t first = reference.back();
						reference.pop_back();
						for(size_t i = first; i <= last; i++)
						{
							reference.push_back(i);
						}
					}
					break;

				case PR_BOOLEAN_TRUE:
					//TODO push boolean value
					ss.push(TT_TRUE);
					break;

				case PR_BOOLEAN_FALSE:
					//TODO push boolean value
					ss.push(TT_FALSE);
					break;

				case PR_NUMBER_1:
					ss.push(NT_FLOAT_SET);
					ss.push(TT_FLOAT_NUMBER);
					break;

				case PR_NUMBER_2:
					ss.push(NT_INT_TO_FLOAT_SET);
					ss.push(TT_NATURAL_NUMBER);
					break;

				case PR_FLOAT_SET:
					try
					{
						temp_float.push_back(boost::lexical_cast<double>(temp_token));
						temp_token.clear();
					}
					catch(boost::bad_lexical_cast &e)
					{
						std::cerr << "PR_FLOAT_SET" << e.what() << std::endl;
						std::cerr << temp_token << std::endl;
					}
					break;

				case PR_INT_TO_FLOAT_SET:
					try
					{
						temp_float.push_back(boost::lexical_cast<double>(temp_token));
						temp_token.clear();
					}
					catch(boost::bad_lexical_cast &e)
					{
						std::cerr << "PR_INT_TO_FLOAT_SET" << e.what() << std::endl;
						std::cerr << temp_token << std::endl;
					}
					break;

				case PR_START_1:
					ss.push(TT_EOF);
					ss.push(NT_DOCUMENT);
					break;

				case PR_START_2:
					ss.push(TT_EOF);
					break;

				case PR_DOCUMENT_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_ELEMENT_LIST_FOLLOW);
					ss.push(NT_ELEMENT_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NODE_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_MATERIAL_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_HEADER);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_HEADER_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_MODEL_TYPE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_FORMAT_VERSION);
					ss.push(TT_OBJECT_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FEM);
					break;

				case PR_FORMAT_VERSION_1:
					ss.push(TT_LABEL_V1_0);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_VERSION);
					break;

				case PR_MODEL_TYPE_1:
					ss.push(TT_LABEL_3D_SOLID);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					break;

				case PR_MATERIAL_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_MATERIAL_FOLLOW);
					ss.push(NT_MATERIAL_SET);
					ss.push(NT_MATERIAL);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_MATERIALS);
					break;

				case PR_MATERIAL_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_ELASTIC_LIMIT);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_POISSON_COEFFICIENT);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_YOUNG_MODULUS);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_MATERIAL_TYPE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_MATERIAL_TYPE_1:
					ss.push(TT_LABEL_LINEAR_ELASTIC);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					break;

				case PR_YOUNG_MODULUS_1:
					ss.push(NT_YOUNG_MODULUS_SET);
					ss.push(NT_NUMBER);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_E);
					break;

				case PR_YOUNG_MODULUS_SET:
					temp_material.E = temp_float.back();
					temp_float.pop_back();
					break;

				case PR_POISSON_COEFFICIENT_1:
					ss.push(NT_POISSON_COEFFICIENT_SET);
					ss.push(NT_NUMBER);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NU);
					break;

				case PR_POISSON_COEFFICIENT_SET:
					temp_material.nu = temp_float.back();
					temp_float.pop_back();
					break;

				case PR_ELASTIC_LIMIT_1:
					ss.push(NT_ELASTIC_LIMIT_SET);
					ss.push(NT_NUMBER);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FY);
					break;

				case PR_ELASTIC_LIMIT_SET:
					temp_material.fy = temp_float.back();
					temp_float.pop_back();
					break;

				case PR_MATERIAL_SET:
					model.pushMaterial(temp_material);
					break;

				case PR_MATERIAL_FOLLOW_1:
					ss.push(NT_MATERIAL_FOLLOW);
					ss.push(NT_MATERIAL_SET);
					ss.push(NT_MATERIAL);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_MATERIAL_FOLLOW_2:
					break;

				case PR_NODE_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODE_FOLLOW);
					ss.push(NT_NODE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_NODE_1:
					ss.push(NT_NODE_SET);
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_VECTOR3D);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_NODE_SET:
					model.setNode(reference.back(), temp_point.back());
					reference.pop_back();
					temp_point.pop_back();
					break;

				case PR_NODE_FOLLOW_1:
					ss.push(NT_NODE_FOLLOW);
					ss.push(NT_NODE);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_FOLLOW_2:
					break;

				case PR_ELEMENT_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_ELEMENT_FOLLOW);
					ss.push(NT_ELEMENT);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENTS);
					break;

				case PR_ELEMENT_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_ELEMENT_TYPE_FOLLOW);
					ss.push(NT_ELEMENT_TYPE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					ss.push(TT_OBJECT_OPEN);

					reference.clear();
					break;

				case PR_ELEMENT_TYPE_1:
					ss.push(NT_ELEMENT_HEXAHEDRON8);
					break;

				case PR_ELEMENT_TYPE_2:
					ss.push(NT_ELEMENT_HEXAHEDRON20);
					break;

				case PR_ELEMENT_TYPE_3:
					ss.push(NT_ELEMENT_HEXAHEDRON27);
					break;

				case PR_ELEMENT_TYPE_4:
					ss.push(NT_ELEMENT_TETRAHEDRON4);
					break;

				case PR_ELEMENT_TYPE_5:
					ss.push(NT_ELEMENT_TETRAHEDRON10);
					break;
				case PR_ELEMENT_TYPE_6:
					ss.push(NT_ELEMENT_PRISM6);
					break;

				case PR_ELEMENT_TYPE_7:
					ss.push(NT_ELEMENT_PRISM15);
					break;

				case PR_ELEMENT_TYPE_8:
					ss.push(NT_ELEMENT_PRISM18);
					break;

				case PR_ELEMENT_HEXAHEDRON8_1:
					ss.push(NT_ELEMENT_HEXAHEDRON8_SET);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 7; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_HEXAHEDRON8);
					break;

				case PR_ELEMENT_HEXAHEDRON20_1:
					ss.push(NT_ELEMENT_HEXAHEDRON20_SET);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 19; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_HEXAHEDRON20);
					break;


				case PR_ELEMENT_HEXAHEDRON27_1:
					ss.push(NT_ELEMENT_HEXAHEDRON27_SET);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 26; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_HEXAHEDRON27);
					break;


				case PR_ELEMENT_TETRAHEDRON4_1:
					ss.push(NT_ELEMENT_TETRAHEDRON4_SET);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 3; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TETRAHEDRON4);
					break;

				case PR_ELEMENT_TETRAHEDRON10_1:
					ss.push(NT_ELEMENT_TETRAHEDRON10_SET);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 9; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TETRAHEDRON10);
					break;


				case PR_ELEMENT_PRISM6_1:
					ss.push(NT_ELEMENT_PRISM6_SET);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 5; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_PRISM6);
					break;


				case PR_ELEMENT_PRISM15_1:
					ss.push(NT_ELEMENT_PRISM15);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 19; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_PRISM15);
					break;


				case PR_ELEMENT_PRISM18_1:
					ss.push(NT_ELEMENT_PRISM18);
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 19; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_PRISM18);
					break;

				case PR_ELEMENT_HEXAHEDRON8_SET:
					model.pushElement(fem::Element::FE_HEXAHEDRON8, reference);
					reference.clear();

					break;

				case PR_ELEMENT_HEXAHEDRON20_SET:
					model.pushElement(fem::Element::FE_HEXAHEDRON20, reference);
					reference.clear();
					break;

				case PR_ELEMENT_HEXAHEDRON27_SET:
					model.pushElement(fem::Element::FE_HEXAHEDRON27, reference);
					reference.clear();
					break;

				case PR_ELEMENT_TETRAHEDRON4_SET:
					model.pushElement(fem::Element::FE_TETRAHEDRON4, reference);
					reference.clear();
					break;

				case PR_ELEMENT_TETRAHEDRON10_SET:
					model.pushElement(fem::Element::FE_TETRAHEDRON10, reference);
					reference.clear();
					break;

				case PR_ELEMENT_PRISM6_SET:
					model.pushElement(fem::Element::FE_PRISM6, reference);
					reference.clear();
					break;

				case PR_ELEMENT_PRISM15_SET:
					model.pushElement(fem::Element::FE_PRISM15, reference);
					reference.clear();
					break;

				case PR_ELEMENT_PRISM18_SET:
					model.pushElement(fem::Element::FE_PRISM18, reference);
					reference.clear();
					break;

				case PR_ELEMENT_TYPE_FOLLOW_1:
					ss.push(NT_ELEMENT_MATERIAL);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_TYPE_FOLLOW_2:
					break;

				case PR_ELEMENT_MATERIAL_1:
					ss.push(NT_ELEMENT_MATERIAL_SET);
					ss.push(NT_REFERENCE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_MATERIAL);
					break;

				case PR_ELEMENT_MATERIAL_SET_1:
					model.setDefaultMaterial(reference.back());
					reference.pop_back();
					break;

				case PR_ELEMENT_FOLLOW_1:
					ss.push(NT_ELEMENT_FOLLOW);
					ss.push(NT_ELEMENT);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_FOLLOW_2:
					break;

				case PR_ELEMENT_LIST_FOLLOW_1:
					ss.push(NT_EXTRA_DEFINITIONS);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_LIST_FOLLOW_2:
					break;

				case PR_EXTRA_DEFINITIONS_1:
					ss.push(NT_GROUPS_LIST_FOLLOW);
					ss.push(NT_GROUPS_LIST);
					break;

				case PR_EXTRA_DEFINITIONS_2:
					ss.push(NT_NODE_RESTRICTIONS_LIST_FOLLOW);
					ss.push(NT_NODE_RESTRICTIONS_LIST);
					break;

				case PR_EXTRA_DEFINITIONS_3:
					ss.push(NT_LOAD_PATTERNS_LIST_FOLLOW);
					ss.push(NT_LOAD_PATTERNS_LIST);
					break;

				case PR_GROUPS_LIST_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_GROUP_TYPE);
					ss.push(TT_OBJECT_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_GROUPS);
					break;

				case PR_GROUP_TYPE_1:
					ss.push(NT_NODE_GROUP_LIST_FOLLOW);
					ss.push(NT_NODE_GROUP_LIST);
					break;

				case PR_GROUP_TYPE_2:
					ss.push(NT_ELEMENT_GROUP_LIST_FOLLOW);
					ss.push(NT_ELEMENT_GROUP_LIST);
					break;

				case PR_GROUPS_LIST_FOLLOW_1:
					ss.push(NT_GROUPS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_GROUPS_LIST_FOLLOW_2:
					break;

				case PR_GROUPS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_RESTRICTIONS_LIST_FOLLOW);
					ss.push(NT_NODE_RESTRICTIONS_LIST);
					break;

				case PR_GROUPS_LIST_FOLLOW_FOLLOW_2:
					ss.push(NT_LOAD_PATTERNS_LIST_FOLLOW);
					ss.push(NT_LOAD_PATTERNS_LIST);
					break;

				case PR_NODE_GROUP_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODE_GROUP_FOLLOW);
					ss.push(NT_NODE_GROUP_SET);
					ss.push(NT_NODE_GROUP);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_NODE_GROUP_LIST_FOLLOW_1:
					ss.push(NT_ELEMENT_GROUP_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_GROUP_LIST_FOLLOW_2:
					break;

				case PR_NODE_GROUP_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_REFERENCE_LIST);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_NODE_GROUP_SET:
					//TODO finish this
					break;

				case PR_NODE_GROUP_FOLLOW_1:
					ss.push(NT_NODE_GROUP_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_GROUP_FOLLOW_2:
					break;

				case PR_NODE_GROUP_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_GROUP_FOLLOW);
					ss.push(NT_NODE_GROUP_SET);
					ss.push(NT_NODE_GROUP);
					break;

				case PR_ELEMENT_GROUP_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_ELEMENT_GROUP_FOLLOW);
					ss.push(NT_ELEMENT_GROUP_SET);
					ss.push(NT_ELEMENT_GROUP);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENTS);
					break;

				case PR_ELEMENT_GROUP_LIST_FOLLOW_1:
					break;

				case PR_ELEMENT_GROUP_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_REFERENCE_LIST);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENTS);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_ELEMENT_GROUP_SET:
					//TODO finish this
					break;

				case PR_ELEMENT_GROUP_FOLLOW_1:
					ss.push(NT_ELEMENT_GROUP_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_GROUP_FOLLOW_2:
					break;

				case PR_ELEMENT_GROUP_FOLLOW_FOLLOW_1:
					ss.push(NT_ELEMENT_GROUP_FOLLOW);
					ss.push(NT_ELEMENT_GROUP_SET);
					ss.push(NT_ELEMENT_GROUP);
					break;

				case PR_NODE_RESTRICTIONS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODE_RESTRICTION_FOLLOW);
					ss.push(NT_NODE_RESTRICTION);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODE_RESTRICTIONS);
					break;

				case PR_NODE_RESTRICTIONS_LIST_FOLLOW_1:
					ss.push(NT_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_RESTRICTIONS_LIST_FOLLOW_2:
					break;

				case PR_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_LOAD_PATTERNS_LIST_FOLLOW);
					ss.push(NT_LOAD_PATTERNS_LIST);
					break;

				case PR_NODE_RESTRICTION_1:
					ss.push(NT_NODE_RESTRICTION_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_NODE_DOF);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NODE_REFERENCE);
					ss.push(TT_OBJECT_OPEN);

					temp_node_restrictions.reset();
					break;

				case PR_NODE_REFERENCE_1:
					ss.push(NT_NODE_REFERENCE_SET);
					ss.push(NT_MULTI_REFERENCE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODE);
					reference.clear();
					break;

				case PR_NODE_REFERENCE_SET:
					break;

				case PR_NODE_DOF_1:
					ss.push(NT_NODE_DOF_DX_FOLLOW);
					ss.push(NT_NODE_DOF_DX);
					break;

				case PR_NODE_DOF_2:
					ss.push(NT_NODE_DOF_DY_FOLLOW);
					ss.push(NT_NODE_DOF_DY);
					break;

				case PR_NODE_DOF_3:
					ss.push(NT_NODE_DOF_DZ_FOLLOW);
					ss.push(NT_NODE_DOF_DZ);
					break;

				case PR_NODE_DOF_DX_1:
					ss.push(NT_NODE_DOF_DX_SET);
					ss.push(NT_BOOLEAN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DX);
					break;

				case PR_NODE_DOF_DX_SET:
					temp_node_restrictions.setdx();
					break;

				case PR_NODE_DOF_DX_FOLLOW_1:
					ss.push(NT_NODE_DOF_DX_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_DOF_DX_FOLLOW_2:
					break;

				case PR_NODE_DOF_DX_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_DOF_DY_FOLLOW);
					ss.push(NT_NODE_DOF_DY);
					break;

				case PR_NODE_DOF_DX_FOLLOW_FOLLOW_2:
					ss.push(NT_NODE_DOF_DZ_FOLLOW);
					ss.push(NT_NODE_DOF_DZ);
					break;

				case PR_NODE_DOF_DX_FOLLOW_FOLLOW_3:
					break;

				case PR_NODE_DOF_DY_1:
					ss.push(NT_NODE_DOF_DY_SET);
					ss.push(NT_BOOLEAN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DY);
					break;

				case PR_NODE_DOF_DY_SET:
					temp_node_restrictions.setdy();
					break;

				case PR_NODE_DOF_DY_FOLLOW_1:
					ss.push(NT_NODE_DOF_DY_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_DOF_DY_FOLLOW_2:
					break;

				case PR_NODE_DOF_DY_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_DOF_DZ_FOLLOW);
					ss.push(NT_NODE_DOF_DZ);
					break;

				case PR_NODE_DOF_DY_FOLLOW_FOLLOW_2:
					break;

				case PR_NODE_DOF_DZ_1:
					ss.push(NT_NODE_DOF_DZ_SET);
					ss.push(NT_BOOLEAN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DZ);
					break;

				case PR_NODE_DOF_DZ_SET:
					temp_node_restrictions.setdz();
					break;

				case PR_NODE_DOF_DZ_FOLLOW_1:
					break;

				case PR_NODE_RESTRICTION_SET:
					//TODO finish this
					for(std::vector<size_t>::iterator i = reference.begin(); i != reference.end(); i++)
					{
						model.pushNodeRestrictions(*i, temp_node_restrictions);
					}
					reference.clear();
					temp_node_restrictions.reset();
					break;

				case PR_NODE_RESTRICTION_FOLLOW_1:
					ss.push(NT_NODE_RESTRICTION_FOLLOW);
					ss.push(NT_NODE_RESTRICTION);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_RESTRICTION_FOLLOW_2:
					break;

				case PR_LOAD_PATTERNS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_LOAD_PATTERN_FOLLOW);
					ss.push(NT_LOAD_PATTERN);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_LOAD_PATTERNS);
					break;

				case PR_LOAD_PATTERN_1:
					ss.push(NT_LOAD_PATTERN_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_LOAD_PATTERN_LABEL_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_OBJECT_OPEN);

					temp_load_pattern.clear();
					break;

				case PR_LOAD_PATTERN_SET:
					temp_load_pattern.label = label;
					model.pushLoadPattern(temp_load_pattern);
					break;

				case PR_LOAD_PATTERN_LABEL_FOLLOW_1:
					ss.push(NT_NODAL_LOADS_LIST_FOLLOW);
					ss.push(NT_NODAL_LOADS_LIST);
					break;

				case PR_LOAD_PATTERN_LABEL_FOLLOW_2:
					ss.push(NT_SURFACE_LOADS_LIST_FOLLOW);
					ss.push(NT_SURFACE_LOADS_LIST);
					break;

				case PR_LOAD_PATTERN_LABEL_FOLLOW_3:
					ss.push(NT_DOMAIN_LOADS_LIST_FOLLOW);
					ss.push(NT_DOMAIN_LOADS_LIST);
					break;

				case PR_NODAL_LOADS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODAL_LOAD_FOLLOW);
					ss.push(NT_NODAL_LOAD);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODAL_LOADS);
					break;

				case PR_NODAL_LOAD_1:
					ss.push(NT_NODAL_LOAD_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_NODAL_LOAD_FORCE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NODE_REFERENCE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_NODAL_LOAD_SET:
					for(std::vector<size_t>::iterator i = reference.begin(); i != reference.end(); i++)
					{
						temp_load_pattern.addNodalLoad(*i, temp_point.back());
					}
					reference.clear();
					temp_point.pop_back();
					break;

				case PR_NODAL_LOAD_FOLLOW_1:
					ss.push(NT_NODAL_LOAD_FOLLOW);
					ss.push(NT_NODAL_LOAD);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODAL_LOAD_FOLLOW_2:
					break;

				case PR_NODAL_LOAD_FORCE_1:
					ss.push(NT_VECTOR3D);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_1:
					ss.push(NT_NODAL_LOADS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_2:
					break;

				case PR_SURFACE_LOADS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_SURFACE_LOAD_FOLLOW);
					ss.push(NT_SURFACE_LOAD);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_SURFACE_LOADS);
					break;

				case PR_SURFACE_LOAD_1:
					ss.push(NT_SURFACE_LOAD_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_SURFACE_LOAD_TYPE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_SURFACE_LOAD_TYPE_1:
					ss.push(NT_SURFACE_TRIANGLE3_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_TRIANGLE3_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TRIANGLE3);

					temp_surface_load.type = fem::Element::FE_TRIANGLE3;
					break;


				case PR_SURFACE_LOAD_TYPE_2:
					ss.push(NT_SURFACE_TRIANGLE6_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_TRIANGLE6_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TRIANGLE6);
					temp_surface_load.type = fem::Element::FE_TRIANGLE6;
					break;

				case PR_SURFACE_LOAD_TYPE_3:
					ss.push(NT_SURFACE_QUADRANGLE4_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_QUADRANGLE4_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_QUADRANGLE4);
					temp_surface_load.type = fem::Element::FE_QUADRANGLE4;
					break;

				case PR_SURFACE_LOAD_TYPE_4:
					ss.push(NT_SURFACE_QUADRANGLE8_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_QUADRANGLE8_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_QUADRANGLE8);
					temp_surface_load.type = fem::Element::FE_QUADRANGLE8;
					break;

				case PR_SURFACE_LOAD_TYPE_5:
					ss.push(NT_SURFACE_QUADRANGLE9_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_QUADRANGLE9_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_QUADRANGLE9);
					temp_surface_load.type = fem::Element::FE_QUADRANGLE9;
					break;

				case PR_SURFACE_LOAD_SET:
					temp_surface_load.nodes = reference;
					temp_surface_load.surface_forces = temp_point;
					temp_load_pattern.addSurfaceLoad(temp_surface_load);
					reference.clear();
					temp_point.clear();
					break;

				case PR_SURFACE_TRIANGLE3_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 2; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_TRIANGLE6_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 5; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_QUADRANGLE4_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 3; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_QUADRANGLE8_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 7; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_QUADRANGLE9_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 8; i++)
					{
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_TRIANGLE3_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 2; i++)
					{
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_TRIANGLE6_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 5; i++)
					{
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_QUADRANGLE4_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 3; i++)
					{
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_QUADRANGLE8_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 7; i++)
					{
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_QUADRANGLE9_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for(int i = 0; i < 8; i++)
					{
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_LOADS_LIST_FOLLOW_1:
					ss.push(NT_SURFACE_LOADS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_SURFACE_LOADS_LIST_FOLLOW_2:
					break;
							
				case PR_SURFACE_LOADS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_DOMAIN_LOADS_LIST_FOLLOW);
					ss.push(NT_DOMAIN_LOADS_LIST);
					break;

				case PR_SURFACE_LOAD_FOLLOW_1:
					ss.push(NT_SURFACE_LOAD_FOLLOW);
					ss.push(NT_SURFACE_LOAD);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_SURFACE_LOAD_FOLLOW_2:
					break;

				case PR_DOMAIN_LOADS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_DOMAIN_LOAD_FOLLOW);
					ss.push(NT_DOMAIN_LOAD);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DOMAIN_LOADS);
					break;

				case PR_DOMAIN_LOADS_LIST_FOLLOW_1:
					break;

				case PR_DOMAIN_LOAD_1:
					ss.push(NT_DOMAIN_LOAD_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_DOMAIN_FORCE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_ELEMENT_REFERENCE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_DOMAIN_LOAD_SET:
					for(std::vector<size_t>::iterator i = reference.begin(); i != reference.end(); i++)
					{
						temp_load_pattern.addDomainLoad(*i, temp_point.back());
					}
					reference.clear();
					temp_point.pop_back();
					break;

				case PR_ELEMENT_REFERENCE_1:
					ss.push(NT_MULTI_REFERENCE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENT);
					break;

				case PR_DOMAIN_FORCE_1:
					ss.push(NT_VECTOR3D);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_DOMAIN_LOAD_FOLLOW_1:
					ss.push(NT_DOMAIN_LOAD_FOLLOW);
					ss.push(NT_DOMAIN_LOAD);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_DOMAIN_LOAD_FOLLOW_2:
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_SURFACE_LOADS_LIST_FOLLOW);
					ss.push(NT_SURFACE_LOADS_LIST);
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_2:
					ss.push(NT_DOMAIN_LOADS_LIST_FOLLOW);
					ss.push(NT_DOMAIN_LOADS_LIST);
					break;

				case PR_LOAD_PATTERN_FOLLOW_1:
					ss.push(NT_LOAD_PATTERN_FOLLOW);
					ss.push(NT_LOAD_PATTERN);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_LOAD_PATTERN_FOLLOW_2:
					break;

				case PR_LOAD_PATTERNS_LIST_FOLLOW_1:
					break;

				default:
					this->error.code = Error::Type::ERR_UNKNOWN;
					this->error.message = "Unknown error while parsing line " + boost::lexical_cast<std::string>(line_number);
					return this->error.code;
					break;
			}
		}
	}

	// all is good
	this->error.code = Error::Type::ERR_OK;
	this->error.message.clear();
	return this->error.code;
}


enum FemJsonParser::TerminalTokens 
FemJsonParser::lexer(std::istream &file)
{
	#define YYFILL fill(file);
starting_point:
	tok = pos;

#line 1326 "parsers/FemJsonParser.c++"
	{
		unsigned char yych;
		unsigned int yyaccept = 0;

		if ((limit - pos) < 19) YYFILL(19);
		yych = *pos;
		switch (yych) {
		case 0x00:	goto yy24;
		case '\t':
		case ' ':	goto yy26;
		case '\n':	goto yy28;
		case '"':	goto yy2;
		case '+':	goto yy7;
		case ',':	goto yy19;
		case '-':	goto yy8;
		case '0':	goto yy4;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy6;
		case ':':	goto yy17;
		case '[':	goto yy13;
		case ']':	goto yy15;
		case 'f':	goto yy22;
		case 'n':	goto yy23;
		case 't':	goto yy21;
		case '{':	goto yy9;
		case '}':	goto yy11;
		default:	goto yy30;
		}
yy2:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
		case '\n':	goto yy3;
		case '1':	goto yy65;
		case '3':	goto yy66;
		case 'E':	goto yy67;
		case 'd':	goto yy68;
		case 'e':	goto yy69;
		case 'f':	goto yy70;
		case 'g':	goto yy71;
		case 'h':	goto yy72;
		case 'l':	goto yy73;
		case 'm':	goto yy74;
		case 'n':	goto yy75;
		case 'p':	goto yy76;
		case 'q':	goto yy77;
		case 's':	goto yy78;
		case 't':	goto yy79;
		case 'v':	goto yy80;
		default:	goto yy64;
		}
yy3:
#line 1393 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_UNKNOWN); 		}
#line 1388 "parsers/FemJsonParser.c++"
yy4:
		yyaccept = 1;
		yych = *(marker = ++pos);
		switch (yych) {
		case '.':	goto yy51;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy5;
		}
yy5:
#line 1375 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_NATURAL_NUMBER);	}
#line 1401 "parsers/FemJsonParser.c++"
yy6:
		yyaccept = 1;
		yych = *(marker = ++pos);
		goto yy62;
yy7:
		yych = *++pos;
		switch (yych) {
		case '0':	goto yy58;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy59;
		default:	goto yy3;
		}
yy8:
		yych = *++pos;
		switch (yych) {
		case '0':	goto yy47;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy49;
		default:	goto yy3;
		}
yy9:
		++pos;
#line 1379 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_OBJECT_OPEN); 	}
#line 1440 "parsers/FemJsonParser.c++"
yy11:
		++pos;
#line 1380 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_OBJECT_CLOSE); 	}
#line 1445 "parsers/FemJsonParser.c++"
yy13:
		++pos;
#line 1381 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_ARRAY_OPEN); 	}
#line 1450 "parsers/FemJsonParser.c++"
yy15:
		++pos;
#line 1382 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_ARRAY_CLOSE); 	}
#line 1455 "parsers/FemJsonParser.c++"
yy17:
		++pos;
#line 1383 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_NAME_SEPARATOR);	}
#line 1460 "parsers/FemJsonParser.c++"
yy19:
		++pos;
#line 1384 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_VALUE_SEPARATOR);	}
#line 1465 "parsers/FemJsonParser.c++"
yy21:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
		case 'r':	goto yy43;
		default:	goto yy3;
		}
yy22:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
		case 'a':	goto yy38;
		default:	goto yy3;
		}
yy23:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
		case 'u':	goto yy33;
		default:	goto yy3;
		}
yy24:
		++pos;
#line 1389 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_EOF);		}
#line 1491 "parsers/FemJsonParser.c++"
yy26:
		++pos;
		yych = *pos;
		goto yy32;
yy27:
#line 1391 "parsers/FemJsonParser.c++.re2c"
		{ goto starting_point;				}
#line 1499 "parsers/FemJsonParser.c++"
yy28:
		++pos;
#line 1392 "parsers/FemJsonParser.c++.re2c"
		{ line_number++; goto starting_point;		}
#line 1504 "parsers/FemJsonParser.c++"
yy30:
		yych = *++pos;
		goto yy3;
yy31:
		++pos;
		if (limit <= pos) YYFILL(1);
		yych = *pos;
yy32:
		switch (yych) {
		case '\t':
		case ' ':	goto yy31;
		default:	goto yy27;
		}
yy33:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy35;
		default:	goto yy34;
		}
yy34:
		pos = marker;
		switch (yyaccept) {
		case 0: 	goto yy3;
		case 1: 	goto yy5;
		case 2: 	goto yy48;
		}
yy35:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy36;
		default:	goto yy34;
		}
yy36:
		++pos;
#line 1387 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_NULL);	}
#line 1541 "parsers/FemJsonParser.c++"
yy38:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy39;
		default:	goto yy34;
		}
yy39:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy40;
		default:	goto yy34;
		}
yy40:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy41;
		default:	goto yy34;
		}
yy41:
		++pos;
#line 1386 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_FALSE);	}
#line 1564 "parsers/FemJsonParser.c++"
yy43:
		yych = *++pos;
		switch (yych) {
		case 'u':	goto yy44;
		default:	goto yy34;
		}
yy44:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy45;
		default:	goto yy34;
		}
yy45:
		++pos;
#line 1385 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_TRUE);	}
#line 1581 "parsers/FemJsonParser.c++"
yy47:
		yyaccept = 2;
		yych = *(marker = ++pos);
		switch (yych) {
		case '.':	goto yy51;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy48;
		}
yy48:
#line 1376 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_FLOAT_NUMBER);	}
#line 1594 "parsers/FemJsonParser.c++"
yy49:
		yyaccept = 2;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
		switch (yych) {
		case '.':	goto yy51;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy49;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy48;
		}
yy51:
		yych = *++pos;
		switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy56;
		default:	goto yy34;
		}
yy52:
		yych = *++pos;
		switch (yych) {
		case '+':
		case '-':	goto yy53;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy54;
		default:	goto yy34;
		}
yy53:
		yych = *++pos;
		switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy54;
		default:	goto yy34;
		}
yy54:
		++pos;
		if (limit <= pos) YYFILL(1);
		yych = *pos;
		switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy54;
		default:	goto yy48;
		}
yy56:
		yyaccept = 2;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
		switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy56;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy48;
		}
yy58:
		yyaccept = 2;
		yych = *(marker = ++pos);
		switch (yych) {
		case '.':	goto yy51;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy48;
		}
yy59:
		yyaccept = 2;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
		switch (yych) {
		case '.':	goto yy51;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy59;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy48;
		}
yy61:
		yyaccept = 1;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
yy62:
		switch (yych) {
		case '.':	goto yy51;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto yy61;
		case 'E':
		case 'e':	goto yy52;
		default:	goto yy5;
		}
yy63:
		++pos;
		if (limit <= pos) YYFILL(1);
		yych = *pos;
yy64:
		switch (yych) {
		case '\n':	goto yy34;
		case '"':	goto yy81;
		default:	goto yy63;
		}
yy65:
		yych = *++pos;
		switch (yych) {
		case '.':	goto yy341;
		default:	goto yy64;
		}
yy66:
		yych = *++pos;
		switch (yych) {
		case 'D':	goto yy332;
		default:	goto yy64;
		}
yy67:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy330;
		default:	goto yy64;
		}
yy68:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy311;
		case 'x':	goto yy308;
		case 'y':	goto yy309;
		case 'z':	goto yy310;
		default:	goto yy64;
		}
yy69:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy297;
		default:	goto yy64;
		}
yy70:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy281;
		case 'o':	goto yy283;
		case 'y':	goto yy282;
		default:	goto yy64;
		}
yy71:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy274;
		default:	goto yy64;
		}
yy72:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy255;
		default:	goto yy64;
		}
yy73:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy220;
		case 'i':	goto yy221;
		case 'o':	goto yy222;
		default:	goto yy64;
		}
yy74:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy208;
		default:	goto yy64;
		}
yy75:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy173;
		case 'u':	goto yy172;
		default:	goto yy64;
		}
yy76:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy158;
		default:	goto yy64;
		}
yy77:
		yych = *++pos;
		switch (yych) {
		case 'u':	goto yy140;
		default:	goto yy64;
		}
yy78:
		yych = *++pos;
		switch (yych) {
		case 'u':	goto yy126;
		default:	goto yy64;
		}
yy79:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy92;
		case 'r':	goto yy93;
		case 'y':	goto yy91;
		default:	goto yy64;
		}
yy80:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy83;
		default:	goto yy64;
		}
yy81:
		++pos;
#line 1378 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_TEXT_STRING);	}
#line 1872 "parsers/FemJsonParser.c++"
yy83:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy84;
		default:	goto yy64;
		}
yy84:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy85;
		default:	goto yy64;
		}
yy85:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy86;
		default:	goto yy64;
		}
yy86:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy87;
		default:	goto yy64;
		}
yy87:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy88;
		default:	goto yy64;
		}
yy88:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy89;
		default:	goto yy64;
		}
yy89:
		++pos;
#line 1335 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_VERSION);	}
#line 1913 "parsers/FemJsonParser.c++"
yy91:
		yych = *++pos;
		switch (yych) {
		case 'p':	goto yy122;
		default:	goto yy64;
		}
yy92:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy106;
		default:	goto yy64;
		}
yy93:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy94;
		default:	goto yy64;
		}
yy94:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy95;
		default:	goto yy64;
		}
yy95:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy96;
		default:	goto yy64;
		}
yy96:
		yych = *++pos;
		switch (yych) {
		case 'g':	goto yy97;
		default:	goto yy64;
		}
yy97:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy98;
		default:	goto yy64;
		}
yy98:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy99;
		default:	goto yy64;
		}
yy99:
		yych = *++pos;
		switch (yych) {
		case '3':	goto yy100;
		case '6':	goto yy101;
		default:	goto yy64;
		}
yy100:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy104;
		default:	goto yy64;
		}
yy101:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy102;
		default:	goto yy64;
		}
yy102:
		++pos;
#line 1367 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_TRIANGLE6);	}
#line 1985 "parsers/FemJsonParser.c++"
yy104:
		++pos;
#line 1366 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_TRIANGLE3);	}
#line 1990 "parsers/FemJsonParser.c++"
yy106:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy107;
		default:	goto yy64;
		}
yy107:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy108;
		default:	goto yy64;
		}
yy108:
		yych = *++pos;
		switch (yych) {
		case 'h':	goto yy109;
		default:	goto yy64;
		}
yy109:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy110;
		default:	goto yy64;
		}
yy110:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy111;
		default:	goto yy64;
		}
yy111:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy112;
		default:	goto yy64;
		}
yy112:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy113;
		default:	goto yy64;
		}
yy113:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy114;
		default:	goto yy64;
		}
yy114:
		yych = *++pos;
		switch (yych) {
		case '1':	goto yy116;
		case '4':	goto yy115;
		default:	goto yy64;
		}
yy115:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy120;
		default:	goto yy64;
		}
yy116:
		yych = *++pos;
		switch (yych) {
		case '0':	goto yy117;
		default:	goto yy64;
		}
yy117:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy118;
		default:	goto yy64;
		}
yy118:
		++pos;
#line 1347 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_TETRAHEDRON10);	}
#line 2068 "parsers/FemJsonParser.c++"
yy120:
		++pos;
#line 1346 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_TETRAHEDRON4);	}
#line 2073 "parsers/FemJsonParser.c++"
yy122:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy123;
		default:	goto yy64;
		}
yy123:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy124;
		default:	goto yy64;
		}
yy124:
		++pos;
#line 1337 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_TYPE);	}
#line 2090 "parsers/FemJsonParser.c++"
yy126:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy127;
		default:	goto yy64;
		}
yy127:
		yych = *++pos;
		switch (yych) {
		case 'f':	goto yy128;
		default:	goto yy64;
		}
yy128:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy129;
		default:	goto yy64;
		}
yy129:
		yych = *++pos;
		switch (yych) {
		case 'c':	goto yy130;
		default:	goto yy64;
		}
yy130:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy131;
		default:	goto yy64;
		}
yy131:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy132;
		default:	goto yy64;
		}
yy132:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy133;
		default:	goto yy64;
		}
yy133:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy134;
		default:	goto yy64;
		}
yy134:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy135;
		default:	goto yy64;
		}
yy135:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy136;
		default:	goto yy64;
		}
yy136:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy137;
		default:	goto yy64;
		}
yy137:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy138;
		default:	goto yy64;
		}
yy138:
		++pos;
#line 1364 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_SURFACE_LOADS);	}
#line 2167 "parsers/FemJsonParser.c++"
yy140:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy141;
		default:	goto yy64;
		}
yy141:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy142;
		default:	goto yy64;
		}
yy142:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy143;
		default:	goto yy64;
		}
yy143:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy144;
		default:	goto yy64;
		}
yy144:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy145;
		default:	goto yy64;
		}
yy145:
		yych = *++pos;
		switch (yych) {
		case 'g':	goto yy146;
		default:	goto yy64;
		}
yy146:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy147;
		default:	goto yy64;
		}
yy147:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy148;
		default:	goto yy64;
		}
yy148:
		yych = *++pos;
		switch (yych) {
		case '4':	goto yy149;
		case '8':	goto yy150;
		case '9':	goto yy151;
		default:	goto yy64;
		}
yy149:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy156;
		default:	goto yy64;
		}
yy150:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy154;
		default:	goto yy64;
		}
yy151:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy152;
		default:	goto yy64;
		}
yy152:
		++pos;
#line 1370 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_QUADRANGLE9);	}
#line 2246 "parsers/FemJsonParser.c++"
yy154:
		++pos;
#line 1369 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_QUADRANGLE8);	}
#line 2251 "parsers/FemJsonParser.c++"
yy156:
		++pos;
#line 1368 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_QUADRANGLE4);	}
#line 2256 "parsers/FemJsonParser.c++"
yy158:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy159;
		default:	goto yy64;
		}
yy159:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy160;
		default:	goto yy64;
		}
yy160:
		yych = *++pos;
		switch (yych) {
		case 'm':	goto yy161;
		default:	goto yy64;
		}
yy161:
		yych = *++pos;
		switch (yych) {
		case '1':	goto yy163;
		case '6':	goto yy162;
		default:	goto yy64;
		}
yy162:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy170;
		default:	goto yy64;
		}
yy163:
		yych = *++pos;
		switch (yych) {
		case '5':	goto yy164;
		case '8':	goto yy165;
		default:	goto yy64;
		}
yy164:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy168;
		default:	goto yy64;
		}
yy165:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy166;
		default:	goto yy64;
		}
yy166:
		++pos;
#line 1353 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_PRISM18);	}
#line 2311 "parsers/FemJsonParser.c++"
yy168:
		++pos;
#line 1352 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_PRISM15);	}
#line 2316 "parsers/FemJsonParser.c++"
yy170:
		++pos;
#line 1351 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_PRISM6);	}
#line 2321 "parsers/FemJsonParser.c++"
yy172:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy206;
		default:	goto yy64;
		}
yy173:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy174;
		default:	goto yy64;
		}
yy174:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy176;
		case 'e':	goto yy175;
		default:	goto yy64;
		}
yy175:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy188;
		case '"':	goto yy186;
		case 's':	goto yy189;
		default:	goto yy64;
		}
yy176:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy177;
		default:	goto yy64;
		}
yy177:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy178;
		default:	goto yy64;
		}
yy178:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy179;
		default:	goto yy64;
		}
yy179:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy180;
		default:	goto yy64;
		}
yy180:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy181;
		default:	goto yy64;
		}
yy181:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy182;
		default:	goto yy64;
		}
yy182:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy183;
		default:	goto yy64;
		}
yy183:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy184;
		default:	goto yy64;
		}
yy184:
		++pos;
#line 1363 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_NODAL_LOADS);	}
#line 2401 "parsers/FemJsonParser.c++"
yy186:
		++pos;
#line 1359 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_NODE);	}
#line 2406 "parsers/FemJsonParser.c++"
yy188:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy192;
		default:	goto yy64;
		}
yy189:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy190;
		default:	goto yy64;
		}
yy190:
		++pos;
#line 1344 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_NODES);	}
#line 2423 "parsers/FemJsonParser.c++"
yy192:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy193;
		default:	goto yy64;
		}
yy193:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy194;
		default:	goto yy64;
		}
yy194:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy195;
		default:	goto yy64;
		}
yy195:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy196;
		default:	goto yy64;
		}
yy196:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy197;
		default:	goto yy64;
		}
yy197:
		yych = *++pos;
		switch (yych) {
		case 'c':	goto yy198;
		default:	goto yy64;
		}
yy198:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy199;
		default:	goto yy64;
		}
yy199:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy200;
		default:	goto yy64;
		}
yy200:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy201;
		default:	goto yy64;
		}
yy201:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy202;
		default:	goto yy64;
		}
yy202:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy203;
		default:	goto yy64;
		}
yy203:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy204;
		default:	goto yy64;
		}
yy204:
		++pos;
#line 1357 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_NODE_RESTRICTIONS);	}
#line 2500 "parsers/FemJsonParser.c++"
yy206:
		++pos;
#line 1341 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_NU);	}
#line 2505 "parsers/FemJsonParser.c++"
yy208:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy209;
		default:	goto yy64;
		}
yy209:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy210;
		default:	goto yy64;
		}
yy210:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy211;
		default:	goto yy64;
		}
yy211:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy212;
		default:	goto yy64;
		}
yy212:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy213;
		default:	goto yy64;
		}
yy213:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy214;
		default:	goto yy64;
		}
yy214:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy215;
		case 's':	goto yy217;
		default:	goto yy64;
		}
yy215:
		++pos;
#line 1354 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_MATERIAL);	}
#line 2553 "parsers/FemJsonParser.c++"
yy217:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy218;
		default:	goto yy64;
		}
yy218:
		++pos;
#line 1339 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_MATERIALS);	}
#line 2564 "parsers/FemJsonParser.c++"
yy220:
		yych = *++pos;
		switch (yych) {
		case 'b':	goto yy250;
		default:	goto yy64;
		}
yy221:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy236;
		default:	goto yy64;
		}
yy222:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy223;
		default:	goto yy64;
		}
yy223:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy224;
		default:	goto yy64;
		}
yy224:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy225;
		default:	goto yy64;
		}
yy225:
		yych = *++pos;
		switch (yych) {
		case 'p':	goto yy226;
		default:	goto yy64;
		}
yy226:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy227;
		default:	goto yy64;
		}
yy227:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy228;
		default:	goto yy64;
		}
yy228:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy229;
		default:	goto yy64;
		}
yy229:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy230;
		default:	goto yy64;
		}
yy230:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy231;
		default:	goto yy64;
		}
yy231:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy232;
		default:	goto yy64;
		}
yy232:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy233;
		default:	goto yy64;
		}
yy233:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy234;
		default:	goto yy64;
		}
yy234:
		++pos;
#line 1358 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_LOAD_PATTERNS);	}
#line 2653 "parsers/FemJsonParser.c++"
yy236:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy237;
		default:	goto yy64;
		}
yy237:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy238;
		default:	goto yy64;
		}
yy238:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy239;
		default:	goto yy64;
		}
yy239:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy240;
		default:	goto yy64;
		}
yy240:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy241;
		default:	goto yy64;
		}
yy241:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy242;
		default:	goto yy64;
		}
yy242:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy243;
		default:	goto yy64;
		}
yy243:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy244;
		default:	goto yy64;
		}
yy244:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy245;
		default:	goto yy64;
		}
yy245:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy246;
		default:	goto yy64;
		}
yy246:
		yych = *++pos;
		switch (yych) {
		case 'c':	goto yy247;
		default:	goto yy64;
		}
yy247:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy248;
		default:	goto yy64;
		}
yy248:
		++pos;
#line 1343 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_LINEAR_ELASTIC);	}
#line 2730 "parsers/FemJsonParser.c++"
yy250:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy251;
		default:	goto yy64;
		}
yy251:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy252;
		default:	goto yy64;
		}
yy252:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy253;
		default:	goto yy64;
		}
yy253:
		++pos;
#line 1333 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_LABEL);	}
#line 2753 "parsers/FemJsonParser.c++"
yy255:
		yych = *++pos;
		switch (yych) {
		case 'x':	goto yy256;
		default:	goto yy64;
		}
yy256:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy257;
		default:	goto yy64;
		}
yy257:
		yych = *++pos;
		switch (yych) {
		case 'h':	goto yy258;
		default:	goto yy64;
		}
yy258:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy259;
		default:	goto yy64;
		}
yy259:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy260;
		default:	goto yy64;
		}
yy260:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy261;
		default:	goto yy64;
		}
yy261:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy262;
		default:	goto yy64;
		}
yy262:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy263;
		default:	goto yy64;
		}
yy263:
		yych = *++pos;
		switch (yych) {
		case '2':	goto yy264;
		case '8':	goto yy265;
		default:	goto yy64;
		}
yy264:
		yych = *++pos;
		switch (yych) {
		case '0':	goto yy268;
		case '7':	goto yy269;
		default:	goto yy64;
		}
yy265:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy266;
		default:	goto yy64;
		}
yy266:
		++pos;
#line 1348 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_HEXAHEDRON8);	}
#line 2826 "parsers/FemJsonParser.c++"
yy268:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy272;
		default:	goto yy64;
		}
yy269:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy270;
		default:	goto yy64;
		}
yy270:
		++pos;
#line 1350 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_HEXAHEDRON27);	}
#line 2843 "parsers/FemJsonParser.c++"
yy272:
		++pos;
#line 1349 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_HEXAHEDRON20);	}
#line 2848 "parsers/FemJsonParser.c++"
yy274:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy275;
		default:	goto yy64;
		}
yy275:
		yych = *++pos;
		switch (yych) {
		case 'u':	goto yy276;
		default:	goto yy64;
		}
yy276:
		yych = *++pos;
		switch (yych) {
		case 'p':	goto yy277;
		default:	goto yy64;
		}
yy277:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy278;
		default:	goto yy64;
		}
yy278:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy279;
		default:	goto yy64;
		}
yy279:
		++pos;
#line 1355 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_GROUPS);	}
#line 2883 "parsers/FemJsonParser.c++"
yy281:
		yych = *++pos;
		switch (yych) {
		case 'm':	goto yy294;
		default:	goto yy64;
		}
yy282:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy292;
		default:	goto yy64;
		}
yy283:
		yych = *++pos;
		switch (yych) {
		case 'r':	goto yy284;
		default:	goto yy64;
		}
yy284:
		yych = *++pos;
		switch (yych) {
		case 'c':	goto yy285;
		default:	goto yy64;
		}
yy285:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy286;
		default:	goto yy64;
		}
yy286:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy287;
		case 's':	goto yy289;
		default:	goto yy64;
		}
yy287:
		++pos;
#line 1372 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_FORCE);		}
#line 2925 "parsers/FemJsonParser.c++"
yy289:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy290;
		default:	goto yy64;
		}
yy290:
		++pos;
#line 1373 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_FORCE);		}
#line 2936 "parsers/FemJsonParser.c++"
yy292:
		++pos;
#line 1342 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_FY);	}
#line 2941 "parsers/FemJsonParser.c++"
yy294:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy295;
		default:	goto yy64;
		}
yy295:
		++pos;
#line 1334 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_FEM);	}
#line 2952 "parsers/FemJsonParser.c++"
yy297:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy298;
		default:	goto yy64;
		}
yy298:
		yych = *++pos;
		switch (yych) {
		case 'm':	goto yy299;
		default:	goto yy64;
		}
yy299:
		yych = *++pos;
		switch (yych) {
		case 'e':	goto yy300;
		default:	goto yy64;
		}
yy300:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy301;
		default:	goto yy64;
		}
yy301:
		yych = *++pos;
		switch (yych) {
		case 't':	goto yy302;
		default:	goto yy64;
		}
yy302:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy304;
		case 's':	goto yy303;
		default:	goto yy64;
		}
yy303:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy306;
		default:	goto yy64;
		}
yy304:
		++pos;
#line 1371 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_ELEMENT);	}
#line 3000 "parsers/FemJsonParser.c++"
yy306:
		++pos;
#line 1345 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_ELEMENTS);	}
#line 3005 "parsers/FemJsonParser.c++"
yy308:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy328;
		default:	goto yy64;
		}
yy309:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy326;
		default:	goto yy64;
		}
yy310:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy324;
		default:	goto yy64;
		}
yy311:
		yych = *++pos;
		switch (yych) {
		case 'm':	goto yy312;
		default:	goto yy64;
		}
yy312:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy313;
		default:	goto yy64;
		}
yy313:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy314;
		default:	goto yy64;
		}
yy314:
		yych = *++pos;
		switch (yych) {
		case 'n':	goto yy315;
		default:	goto yy64;
		}
yy315:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy316;
		default:	goto yy64;
		}
yy316:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy317;
		default:	goto yy64;
		}
yy317:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy318;
		default:	goto yy64;
		}
yy318:
		yych = *++pos;
		switch (yych) {
		case 'a':	goto yy319;
		default:	goto yy64;
		}
yy319:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy320;
		default:	goto yy64;
		}
yy320:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy321;
		default:	goto yy64;
		}
yy321:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy322;
		default:	goto yy64;
		}
yy322:
		++pos;
#line 1365 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_DOMAIN_LOADS);	}
#line 3094 "parsers/FemJsonParser.c++"
yy324:
		++pos;
#line 1362 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_DZ);	}
#line 3099 "parsers/FemJsonParser.c++"
yy326:
		++pos;
#line 1361 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_DY);	}
#line 3104 "parsers/FemJsonParser.c++"
yy328:
		++pos;
#line 1360 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_DX);	}
#line 3109 "parsers/FemJsonParser.c++"
yy330:
		++pos;
#line 1340 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_E);	}
#line 3114 "parsers/FemJsonParser.c++"
yy332:
		yych = *++pos;
		switch (yych) {
		case ' ':	goto yy333;
		default:	goto yy64;
		}
yy333:
		yych = *++pos;
		switch (yych) {
		case 's':	goto yy334;
		default:	goto yy64;
		}
yy334:
		yych = *++pos;
		switch (yych) {
		case 'o':	goto yy335;
		default:	goto yy64;
		}
yy335:
		yych = *++pos;
		switch (yych) {
		case 'l':	goto yy336;
		default:	goto yy64;
		}
yy336:
		yych = *++pos;
		switch (yych) {
		case 'i':	goto yy337;
		default:	goto yy64;
		}
yy337:
		yych = *++pos;
		switch (yych) {
		case 'd':	goto yy338;
		default:	goto yy64;
		}
yy338:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy339;
		default:	goto yy64;
		}
yy339:
		++pos;
#line 1338 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_3D_SOLID);	}
#line 3161 "parsers/FemJsonParser.c++"
yy341:
		yych = *++pos;
		switch (yych) {
		case '0':	goto yy342;
		default:	goto yy64;
		}
yy342:
		yych = *++pos;
		switch (yych) {
		case '"':	goto yy343;
		default:	goto yy64;
		}
yy343:
		++pos;
#line 1336 "parsers/FemJsonParser.c++.re2c"
		{ return lexerReturnProcedures(TT_LABEL_V1_0);	}
#line 3178 "parsers/FemJsonParser.c++"
	}
#line 1394 "parsers/FemJsonParser.c++.re2c"

	#undef YYFILL
}


void FemJsonParser::setParserTable()
{
	table	[NT_LABEL]		[TT_LABEL_LABEL]	=	PR_LABEL;
	table	[NT_LABEL_SET]		[TT_VALUE_SEPARATOR]	=	PR_LABEL_SET;
	table	[NT_LABEL_SET]		[TT_OBJECT_CLOSE]	=	PR_LABEL_SET;

	table	[NT_VECTOR3D]		[TT_ARRAY_OPEN]		=	PR_VECTOR3D;
	table	[NT_VECTOR3D_SET]	[TT_VALUE_SEPARATOR]	=	PR_VECTOR3D_SET;
	table	[NT_VECTOR3D_SET]	[TT_ARRAY_CLOSE]	=	PR_VECTOR3D_SET;
	table	[NT_VECTOR3D_SET]	[TT_OBJECT_CLOSE]	=	PR_VECTOR3D_SET;

	table	[NT_REFERENCE]		[TT_NATURAL_NUMBER]	=	PR_REFERENCE_1;

	table	[NT_REFERENCE_SET]	[TT_VALUE_SEPARATOR]	=	PR_REFERENCE_SET;
	table	[NT_REFERENCE_SET]	[TT_ARRAY_CLOSE]	=	PR_REFERENCE_SET;
	table	[NT_REFERENCE_SET]	[TT_OBJECT_CLOSE]	=	PR_REFERENCE_SET;

	table	[NT_REFERENCE_LIST]	[TT_ARRAY_OPEN]		=	PR_REFERENCE_LIST_1;

	table	[NT_REFERENCE_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_REFERENCE_FOLLOW_1;
	table	[NT_REFERENCE_FOLLOW]	[TT_ARRAY_CLOSE]	=	PR_REFERENCE_FOLLOW_2;

	table	[NT_MULTI_REFERENCE]	[TT_NATURAL_NUMBER]	=	PR_MULTI_REFERENCE_1;
	table	[NT_MULTI_REFERENCE]	[TT_ARRAY_OPEN]		=	PR_MULTI_REFERENCE_2;

	table	[NT_MULTI_REFERENCE_SET]	[TT_VALUE_SEPARATOR]	=	PR_MULTI_REFERENCE_SET;
	table	[NT_MULTI_REFERENCE_SET]	[TT_ARRAY_CLOSE]	=	PR_MULTI_REFERENCE_SET;
	table	[NT_MULTI_REFERENCE_SET]	[TT_OBJECT_CLOSE]	=	PR_MULTI_REFERENCE_SET;

	table	[NT_BOOLEAN]		[TT_TRUE]		=	PR_BOOLEAN_TRUE;
	table	[NT_BOOLEAN]		[TT_FALSE]		=	PR_BOOLEAN_FALSE;

	table	[NT_NUMBER]		[TT_FLOAT_NUMBER]	=	PR_NUMBER_1;
	table	[NT_NUMBER]		[TT_NATURAL_NUMBER]	=	PR_NUMBER_2;

	table	[NT_FLOAT_SET]		[TT_VALUE_SEPARATOR]	=	PR_FLOAT_SET;
	table	[NT_FLOAT_SET]		[TT_ARRAY_CLOSE]	=	PR_FLOAT_SET;
	table	[NT_FLOAT_SET]		[TT_OBJECT_CLOSE]	=	PR_FLOAT_SET;

	table	[NT_INT_TO_FLOAT_SET]	[TT_VALUE_SEPARATOR]	=	PR_INT_TO_FLOAT_SET;
	table	[NT_INT_TO_FLOAT_SET]	[TT_ARRAY_CLOSE]	=	PR_INT_TO_FLOAT_SET;
	table	[NT_INT_TO_FLOAT_SET]	[TT_OBJECT_CLOSE]	=	PR_INT_TO_FLOAT_SET;

	table	[NT_START]		[TT_OBJECT_OPEN]	=	PR_START_1;
	table	[NT_START]		[TT_EOF]		=	PR_START_2;
	
	table	[NT_DOCUMENT]		[TT_OBJECT_OPEN]		=	PR_DOCUMENT_1;

	table	[NT_HEADER]		[TT_LABEL_FEM]		=	PR_HEADER_1;
	table	[NT_FORMAT_VERSION]	[TT_LABEL_VERSION]	=	PR_FORMAT_VERSION_1;

	table	[NT_MODEL_TYPE]		[TT_LABEL_TYPE]		=	PR_MODEL_TYPE_1;

	table	[NT_MATERIAL_LIST]	[TT_LABEL_MATERIALS]	=	PR_MATERIAL_LIST_1;
	table	[NT_MATERIAL]		[TT_OBJECT_OPEN]	=	PR_MATERIAL_1;
	table	[NT_MATERIAL_TYPE]	[TT_LABEL_TYPE]		=	PR_MATERIAL_TYPE_1;
	table	[NT_YOUNG_MODULUS]	[TT_LABEL_E]		=	PR_YOUNG_MODULUS_1;
	table	[NT_YOUNG_MODULUS_SET]	[TT_VALUE_SEPARATOR]	=	PR_YOUNG_MODULUS_SET;
	table	[NT_POISSON_COEFFICIENT]	[TT_LABEL_NU]	=	PR_POISSON_COEFFICIENT_1;
	table	[NT_POISSON_COEFFICIENT_SET]	[TT_VALUE_SEPARATOR]	=	PR_POISSON_COEFFICIENT_SET;
	table	[NT_ELASTIC_LIMIT]	[TT_LABEL_FY]		=	PR_ELASTIC_LIMIT_1;
	table	[NT_ELASTIC_LIMIT_SET]	[TT_OBJECT_CLOSE]	=	PR_ELASTIC_LIMIT_SET;
	table	[NT_MATERIAL_SET]	[TT_VALUE_SEPARATOR]	=	PR_MATERIAL_SET;
	table	[NT_MATERIAL_SET]	[TT_ARRAY_CLOSE]	=	PR_MATERIAL_SET;
	table	[NT_MATERIAL_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_MATERIAL_FOLLOW_1;
	table	[NT_MATERIAL_FOLLOW]	[TT_ARRAY_CLOSE]	=	PR_MATERIAL_FOLLOW_2;

	table	[NT_NODE_LIST]		[TT_LABEL_NODES]	=	PR_NODE_LIST_1;
	table	[NT_NODE]		[TT_ARRAY_OPEN]		=	PR_NODE_1;
	table	[NT_NODE_SET]		[TT_VALUE_SEPARATOR]	=	PR_NODE_SET;
	table	[NT_NODE_SET]		[TT_ARRAY_CLOSE]	=	PR_NODE_SET;
	table	[NT_NODE_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_NODE_FOLLOW_1;
	table	[NT_NODE_FOLLOW]	[TT_ARRAY_CLOSE]	=	PR_NODE_FOLLOW_2;

	table	[NT_ELEMENT_LIST]	[TT_LABEL_ELEMENTS]	=	PR_ELEMENT_LIST_1;
	table	[NT_ELEMENT]		[TT_OBJECT_OPEN]	=	PR_ELEMENT_1;

	table	[NT_ELEMENT_TYPE]	[TT_LABEL_HEXAHEDRON8]		=	PR_ELEMENT_HEXAHEDRON8_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_HEXAHEDRON20]		=	PR_ELEMENT_HEXAHEDRON20_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_HEXAHEDRON27]		=	PR_ELEMENT_HEXAHEDRON27_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_TETRAHEDRON4]		=	PR_ELEMENT_TETRAHEDRON4_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_TETRAHEDRON10]	=	PR_ELEMENT_TETRAHEDRON10_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_PRISM6]		=	PR_ELEMENT_PRISM6_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_PRISM15]		=	PR_ELEMENT_PRISM15_1;
	table	[NT_ELEMENT_TYPE]	[TT_LABEL_PRISM18]		=	PR_ELEMENT_PRISM18_1;

	table	[NT_ELEMENT_HEXAHEDRON8]	[TT_LABEL_HEXAHEDRON8]		=	PR_ELEMENT_HEXAHEDRON8_1;
	table	[NT_ELEMENT_HEXAHEDRON20]	[TT_LABEL_HEXAHEDRON20]		=	PR_ELEMENT_HEXAHEDRON20_1;
	table	[NT_ELEMENT_HEXAHEDRON27]	[TT_LABEL_HEXAHEDRON27]		=	PR_ELEMENT_HEXAHEDRON27_1;
	table	[NT_ELEMENT_TETRAHEDRON4]	[TT_LABEL_TETRAHEDRON4]		=	PR_ELEMENT_TETRAHEDRON4_1;
	table	[NT_ELEMENT_TETRAHEDRON10]	[TT_LABEL_TETRAHEDRON10]	=	PR_ELEMENT_TETRAHEDRON10_1;
	table	[NT_ELEMENT_PRISM6]		[TT_LABEL_PRISM6]		=	PR_ELEMENT_PRISM6_1;
	table	[NT_ELEMENT_PRISM15]		[TT_LABEL_PRISM15]		=	PR_ELEMENT_PRISM15_1;
	table	[NT_ELEMENT_PRISM18]		[TT_LABEL_PRISM18]		=	PR_ELEMENT_PRISM18_1;

	table	[NT_ELEMENT_HEXAHEDRON8_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_HEXAHEDRON8_SET;
	table	[NT_ELEMENT_HEXAHEDRON8_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_HEXAHEDRON8_SET;
	table	[NT_ELEMENT_HEXAHEDRON20_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_HEXAHEDRON20_SET;
	table	[NT_ELEMENT_HEXAHEDRON20_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_HEXAHEDRON20_SET;
	table	[NT_ELEMENT_HEXAHEDRON27_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_HEXAHEDRON27_SET;
	table	[NT_ELEMENT_HEXAHEDRON27_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_HEXAHEDRON27_SET;
	table	[NT_ELEMENT_TETRAHEDRON4_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_TETRAHEDRON4_SET;
	table	[NT_ELEMENT_TETRAHEDRON4_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_TETRAHEDRON4_SET;
	table	[NT_ELEMENT_TETRAHEDRON10_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_TETRAHEDRON10_SET;
	table	[NT_ELEMENT_TETRAHEDRON10_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_TETRAHEDRON10_SET;
	table	[NT_ELEMENT_PRISM6_SET]		[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_PRISM6_SET;
	table	[NT_ELEMENT_PRISM6_SET]		[TT_OBJECT_CLOSE]		=	PR_ELEMENT_PRISM6_SET;
	table	[NT_ELEMENT_PRISM15_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_PRISM15_SET;
	table	[NT_ELEMENT_PRISM15_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_PRISM15_SET;
	table	[NT_ELEMENT_PRISM18_SET]	[TT_VALUE_SEPARATOR]		=	PR_ELEMENT_PRISM18_SET;
	table	[NT_ELEMENT_PRISM18_SET]	[TT_OBJECT_CLOSE]		=	PR_ELEMENT_PRISM18_SET;

	table	[NT_ELEMENT_TYPE_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_ELEMENT_TYPE_FOLLOW_1;
	table	[NT_ELEMENT_TYPE_FOLLOW]	[TT_OBJECT_CLOSE]	=	PR_ELEMENT_TYPE_FOLLOW_2;
	table	[NT_ELEMENT_MATERIAL]		[TT_LABEL_MATERIAL]	=	PR_ELEMENT_MATERIAL_1;
	table	[NT_ELEMENT_MATERIAL_SET]	[TT_OBJECT_CLOSE]	=	PR_ELEMENT_MATERIAL_SET_1;
	table	[NT_ELEMENT_FOLLOW]		[TT_VALUE_SEPARATOR]	=	PR_ELEMENT_FOLLOW_1;
	table	[NT_ELEMENT_FOLLOW]		[TT_ARRAY_CLOSE]	=	PR_ELEMENT_FOLLOW_2;

	table	[NT_ELEMENT_LIST_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_ELEMENT_LIST_FOLLOW_1;
	table	[NT_ELEMENT_LIST_FOLLOW]	[TT_OBJECT_CLOSE]	=	PR_ELEMENT_LIST_FOLLOW_2;
	table	[NT_EXTRA_DEFINITIONS]		[TT_LABEL_GROUPS]		=	PR_EXTRA_DEFINITIONS_1;
	table	[NT_EXTRA_DEFINITIONS]		[TT_LABEL_NODE_RESTRICTIONS]	=	PR_EXTRA_DEFINITIONS_2;
	table	[NT_EXTRA_DEFINITIONS]		[TT_LABEL_ELEMENTS]		=	PR_EXTRA_DEFINITIONS_3;
	table	[NT_GROUPS_LIST]		[TT_LABEL_GROUPS]	=	PR_GROUPS_LIST_1;
	table	[NT_GROUP_TYPE]			[TT_LABEL_NODES]	=	PR_GROUP_TYPE_1;
	table	[NT_GROUP_TYPE]			[TT_LABEL_ELEMENTS]	=	PR_GROUP_TYPE_2;

	table	[NT_GROUPS_LIST_FOLLOW]		[TT_VALUE_SEPARATOR]	=	PR_GROUPS_LIST_FOLLOW_1;
	table	[NT_GROUPS_LIST_FOLLOW]		[TT_OBJECT_CLOSE]	=	PR_GROUPS_LIST_FOLLOW_2;

	table	[NT_GROUPS_LIST_FOLLOW_FOLLOW]		[TT_LABEL_NODE_RESTRICTIONS]	=	PR_GROUPS_LIST_FOLLOW_FOLLOW_1;
	table	[NT_GROUPS_LIST_FOLLOW_FOLLOW]		[TT_LABEL_LOAD_PATTERNS]	=	PR_GROUPS_LIST_FOLLOW_FOLLOW_2;

	table	[NT_NODE_GROUP_LIST]		[TT_LABEL_NODES]	=	PR_NODE_GROUP_LIST_1;
	table	[NT_NODE_GROUP_LIST_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_NODE_GROUP_LIST_FOLLOW_1;
	table	[NT_NODE_GROUP_LIST_FOLLOW]	[TT_OBJECT_CLOSE]	=	PR_NODE_GROUP_LIST_FOLLOW_2;

	table	[NT_NODE_GROUP]			[TT_OBJECT_OPEN]	=	PR_NODE_GROUP_1;

	table	[NT_NODE_GROUP_SET]		[TT_VALUE_SEPARATOR]	=	PR_NODE_GROUP_SET;
	table	[NT_NODE_GROUP_SET]		[TT_ARRAY_CLOSE]	=	PR_NODE_GROUP_SET;

	table	[NT_NODE_GROUP_FOLLOW]		[TT_VALUE_SEPARATOR]	=	PR_NODE_GROUP_FOLLOW_1;
	table	[NT_NODE_GROUP_FOLLOW]		[TT_ARRAY_CLOSE]	=	PR_NODE_GROUP_FOLLOW_2;

	table	[NT_NODE_GROUP_FOLLOW_FOLLOW]	[TT_OBJECT_OPEN]	=	PR_NODE_GROUP_FOLLOW_FOLLOW_1;

	table	[NT_ELEMENT_GROUP_LIST]		[TT_LABEL_ELEMENTS]	=	PR_ELEMENT_GROUP_LIST_1;
	table	[NT_ELEMENT_GROUP_LIST_FOLLOW]	[TT_OBJECT_CLOSE]	=	PR_ELEMENT_GROUP_LIST_FOLLOW_1;
	table	[NT_ELEMENT_GROUP]		[TT_OBJECT_OPEN]	=	PR_ELEMENT_GROUP_1;
	table	[NT_ELEMENT_GROUP_SET]		[TT_VALUE_SEPARATOR]	=	PR_ELEMENT_GROUP_SET;
	table	[NT_ELEMENT_GROUP_SET]		[TT_ARRAY_CLOSE]	=	PR_ELEMENT_GROUP_SET;
	table	[NT_ELEMENT_GROUP_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_ELEMENT_GROUP_FOLLOW_1;
	table	[NT_ELEMENT_GROUP_FOLLOW]	[TT_ARRAY_CLOSE]	=	PR_ELEMENT_GROUP_FOLLOW_2;

	table	[NT_ELEMENT_GROUP_FOLLOW_FOLLOW]	[TT_OBJECT_OPEN]	=	PR_ELEMENT_GROUP_FOLLOW_FOLLOW_1;



	table	[NT_NODE_RESTRICTIONS_LIST]	[TT_LABEL_NODE_RESTRICTIONS]	=	PR_NODE_RESTRICTIONS_LIST_1;

	table	[NT_NODE_RESTRICTIONS_LIST_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_NODE_RESTRICTIONS_LIST_FOLLOW_1;
	table	[NT_NODE_RESTRICTIONS_LIST_FOLLOW]	[TT_OBJECT_CLOSE]	=	PR_NODE_RESTRICTIONS_LIST_FOLLOW_2;
	table	[NT_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW]	[TT_LABEL_LOAD_PATTERNS]	=	PR_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW_1;

	table	[NT_NODE_RESTRICTION]		[TT_OBJECT_OPEN]	=	PR_NODE_RESTRICTION_1;

	table	[NT_NODE_REFERENCE]		[TT_LABEL_NODE]		=	PR_NODE_REFERENCE_1;
	table	[NT_NODE_REFERENCE_SET]		[TT_VALUE_SEPARATOR]	=	PR_NODE_REFERENCE_SET;

	table	[NT_NODE_DOF]			[TT_LABEL_DX]		=	PR_NODE_DOF_1;
	table	[NT_NODE_DOF]			[TT_LABEL_DY]		=	PR_NODE_DOF_2;
	table	[NT_NODE_DOF]			[TT_LABEL_DZ]		=	PR_NODE_DOF_3;
	table	[NT_NODE_DOF_DX]		[TT_LABEL_DX]		=	PR_NODE_DOF_DX_1;

	table	[NT_NODE_DOF_DX_SET]		[TT_VALUE_SEPARATOR]	=	PR_NODE_DOF_DX_SET;
	table	[NT_NODE_DOF_DX_SET]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DX_SET;
	table	[NT_NODE_DOF_DX_FOLLOW]		[TT_VALUE_SEPARATOR]	=	PR_NODE_DOF_DX_FOLLOW_1;
	table	[NT_NODE_DOF_DX_FOLLOW]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DX_FOLLOW_2;

	table	[NT_NODE_DOF_DX_FOLLOW_FOLLOW]		[TT_LABEL_DY]		=	PR_NODE_DOF_DX_FOLLOW_FOLLOW_1;
	table	[NT_NODE_DOF_DX_FOLLOW_FOLLOW]		[TT_LABEL_DZ]		=	PR_NODE_DOF_DX_FOLLOW_FOLLOW_2;
	table	[NT_NODE_DOF_DX_FOLLOW_FOLLOW]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DX_FOLLOW_FOLLOW_3;

	table	[NT_NODE_DOF_DY]		[TT_LABEL_DY]		=	PR_NODE_DOF_DY_1;
	table	[NT_NODE_DOF_DY_SET]		[TT_VALUE_SEPARATOR]	=	PR_NODE_DOF_DY_SET;
	table	[NT_NODE_DOF_DY_SET]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DY_SET;
	table	[NT_NODE_DOF_DY_FOLLOW]		[TT_VALUE_SEPARATOR]	=	PR_NODE_DOF_DY_FOLLOW_1;
	table	[NT_NODE_DOF_DY_FOLLOW]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DY_FOLLOW_2;
	table	[NT_NODE_DOF_DY_FOLLOW_FOLLOW]		[TT_LABEL_DZ]		=	PR_NODE_DOF_DY_FOLLOW_FOLLOW_1;
	table	[NT_NODE_DOF_DY_FOLLOW_FOLLOW]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DY_FOLLOW_FOLLOW_2;

	table	[NT_NODE_DOF_DZ]		[TT_LABEL_DZ]		=	PR_NODE_DOF_DZ_1;
	table	[NT_NODE_DOF_DZ_SET]		[TT_OBJECT_CLOSE]		=	PR_NODE_DOF_DZ_SET;
	table	[NT_NODE_DOF_DZ_FOLLOW]		[TT_OBJECT_CLOSE]		=	PR_NODE_DOF_DZ_FOLLOW_1;
	table	[NT_NODE_DOF_DZ_FOLLOW_FOLLOW]		[TT_OBJECT_CLOSE]	=	PR_NODE_DOF_DZ_FOLLOW_FOLLOW_1;

	table	[NT_NODE_RESTRICTION_SET]	[TT_VALUE_SEPARATOR]	=	PR_NODE_RESTRICTION_SET;
	table	[NT_NODE_RESTRICTION_SET]	[TT_ARRAY_CLOSE]	=	PR_NODE_RESTRICTION_SET;
	table	[NT_NODE_RESTRICTION_FOLLOW]	[TT_VALUE_SEPARATOR]	=	PR_NODE_RESTRICTION_FOLLOW_1;
	table	[NT_NODE_RESTRICTION_FOLLOW]	[TT_ARRAY_CLOSE]	=	PR_NODE_RESTRICTION_FOLLOW_2;

	table	[NT_LOAD_PATTERNS_LIST]		[TT_LABEL_LOAD_PATTERNS]	=	PR_LOAD_PATTERNS_LIST_1;
	table	[NT_LOAD_PATTERN]		[TT_OBJECT_OPEN]		=	PR_LOAD_PATTERN_1;

	table	[NT_LOAD_PATTERN_SET]		[TT_VALUE_SEPARATOR]		=	PR_LOAD_PATTERN_SET;
	table	[NT_LOAD_PATTERN_SET]		[TT_ARRAY_CLOSE]		=	PR_LOAD_PATTERN_SET;

	table	[NT_LOAD_PATTERN_LABEL_FOLLOW]	[TT_LABEL_NODAL_LOADS]		=	PR_LOAD_PATTERN_LABEL_FOLLOW_1;
	table	[NT_LOAD_PATTERN_LABEL_FOLLOW]	[TT_LABEL_SURFACE_LOADS]	=	PR_LOAD_PATTERN_LABEL_FOLLOW_2;
	table	[NT_LOAD_PATTERN_LABEL_FOLLOW]	[TT_LABEL_DOMAIN_LOADS]		=	PR_LOAD_PATTERN_LABEL_FOLLOW_3;
	table	[NT_NODAL_LOADS_LIST]		[TT_LABEL_NODAL_LOADS]		=	PR_NODAL_LOADS_LIST_1;
	table	[NT_NODAL_LOAD]			[TT_OBJECT_OPEN]		=	PR_NODAL_LOAD_1;
	table	[NT_NODAL_LOAD_SET]		[TT_VALUE_SEPARATOR]		=	PR_NODAL_LOAD_SET;
	table	[NT_NODAL_LOAD_SET]		[TT_ARRAY_CLOSE]		=	PR_NODAL_LOAD_SET;

	table	[NT_NODAL_LOAD_FOLLOW]		[TT_VALUE_SEPARATOR]		=	PR_NODAL_LOAD_FOLLOW_1;
	table	[NT_NODAL_LOAD_FOLLOW]		[TT_ARRAY_CLOSE]		=	PR_NODAL_LOAD_FOLLOW_2;
	table	[NT_NODAL_LOAD_FORCE]		[TT_LABEL_FORCE]		=	PR_NODAL_LOAD_FORCE_1;
	table	[NT_NODAL_LOADS_LIST_FOLLOW]	[TT_VALUE_SEPARATOR]		=	PR_NODAL_LOADS_LIST_FOLLOW_1;
	table	[NT_NODAL_LOADS_LIST_FOLLOW]	[TT_OBJECT_CLOSE]		=	PR_NODAL_LOADS_LIST_FOLLOW_2;
	table	[NT_SURFACE_LOADS_LIST]		[TT_LABEL_SURFACE_LOADS]	=	PR_SURFACE_LOADS_LIST_1;
	table	[NT_SURFACE_LOAD]		[TT_OBJECT_OPEN]		=	PR_SURFACE_LOAD_1;
	table	[NT_SURFACE_LOAD_TYPE]		[TT_LABEL_TRIANGLE3]		=	PR_SURFACE_LOAD_TYPE_1;
	table	[NT_SURFACE_LOAD_TYPE]		[TT_LABEL_TRIANGLE6]		=	PR_SURFACE_LOAD_TYPE_2;
	table	[NT_SURFACE_LOAD_TYPE]		[TT_LABEL_QUADRANGLE4]		=	PR_SURFACE_LOAD_TYPE_3;
	table	[NT_SURFACE_LOAD_TYPE]		[TT_LABEL_QUADRANGLE8]		=	PR_SURFACE_LOAD_TYPE_4;
	table	[NT_SURFACE_LOAD_TYPE]		[TT_LABEL_QUADRANGLE9]		=	PR_SURFACE_LOAD_TYPE_5;
	table	[NT_SURFACE_LOAD_SET]		[TT_VALUE_SEPARATOR]		=	PR_SURFACE_LOAD_SET;
	table	[NT_SURFACE_LOAD_SET]		[TT_ARRAY_CLOSE]		=	PR_SURFACE_LOAD_SET;

	table	[NT_SURFACE_TRIANGLE3_NODES]	[TT_LABEL_NODES]		=	PR_SURFACE_TRIANGLE3_NODES_1;
	table	[NT_SURFACE_TRIANGLE6_NODES]	[TT_LABEL_NODES]		=	PR_SURFACE_TRIANGLE6_NODES_1;
	table	[NT_SURFACE_QUADRANGLE4_NODES]	[TT_LABEL_NODES]		=	PR_SURFACE_QUADRANGLE4_NODES_1;
	table	[NT_SURFACE_QUADRANGLE8_NODES]	[TT_LABEL_NODES]		=	PR_SURFACE_QUADRANGLE8_NODES_1;
	table	[NT_SURFACE_QUADRANGLE9_NODES]	[TT_LABEL_NODES]		=	PR_SURFACE_QUADRANGLE9_NODES_1;

	table	[NT_SURFACE_TRIANGLE3_FORCES]	[TT_LABEL_FORCE]		=	PR_SURFACE_TRIANGLE3_FORCES_1;
	table	[NT_SURFACE_TRIANGLE6_FORCES]	[TT_LABEL_FORCE]		=	PR_SURFACE_TRIANGLE6_FORCES_1;
	table	[NT_SURFACE_QUADRANGLE4_FORCES]	[TT_LABEL_FORCE]		=	PR_SURFACE_QUADRANGLE4_FORCES_1;
	table	[NT_SURFACE_QUADRANGLE8_FORCES]	[TT_LABEL_FORCE]		=	PR_SURFACE_QUADRANGLE8_FORCES_1;
	table	[NT_SURFACE_QUADRANGLE9_FORCES]	[TT_LABEL_FORCE]		=	PR_SURFACE_QUADRANGLE9_FORCES_1;

	table 	[NT_SURFACE_LOADS_LIST_FOLLOW]	[TT_VALUE_SEPARATOR]		=	PR_SURFACE_LOADS_LIST_FOLLOW_1;
	table 	[NT_SURFACE_LOADS_LIST_FOLLOW]	[TT_OBJECT_CLOSE]		=	PR_SURFACE_LOADS_LIST_FOLLOW_2;

	table 	[NT_SURFACE_LOADS_LIST_FOLLOW_FOLLOW]	[TT_LABEL_DOMAIN_LOADS]		=	PR_SURFACE_LOADS_LIST_FOLLOW_FOLLOW_1;

	table	[NT_SURFACE_LOAD_FOLLOW]	[TT_VALUE_SEPARATOR]		=	PR_SURFACE_LOAD_FOLLOW_1;
	table	[NT_SURFACE_LOAD_FOLLOW]	[TT_ARRAY_CLOSE]		=	PR_SURFACE_LOAD_FOLLOW_2;
	table	[NT_DOMAIN_LOADS_LIST]		[TT_LABEL_DOMAIN_LOADS]		=	PR_DOMAIN_LOADS_LIST_1;
	table	[NT_DOMAIN_LOADS_LIST_FOLLOW]	[TT_OBJECT_CLOSE]		=	PR_DOMAIN_LOADS_LIST_FOLLOW_1;
	table	[NT_DOMAIN_LOAD]		[TT_OBJECT_OPEN]		=	PR_DOMAIN_LOAD_1;
	table	[NT_DOMAIN_LOAD_SET]		[TT_VALUE_SEPARATOR]		=	PR_DOMAIN_LOAD_SET;
	table	[NT_DOMAIN_LOAD_SET]		[TT_ARRAY_CLOSE]		=	PR_DOMAIN_LOAD_SET;
	table	[NT_ELEMENT_REFERENCE]		[TT_LABEL_ELEMENT]		=	PR_ELEMENT_REFERENCE_1;
	table	[NT_DOMAIN_FORCE]		[TT_LABEL_FORCE]		=	PR_DOMAIN_FORCE_1;
	table	[NT_DOMAIN_LOAD_FOLLOW]		[TT_VALUE_SEPARATOR]		=	PR_DOMAIN_LOAD_FOLLOW_1;
	table	[NT_DOMAIN_LOAD_FOLLOW]		[TT_ARRAY_CLOSE]		=	PR_DOMAIN_LOAD_FOLLOW_2;

	table	[NT_NODAL_LOADS_LIST_FOLLOW_FOLLOW]	[TT_LABEL_SURFACE_LOADS]	=	PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_1;
	table	[NT_NODAL_LOADS_LIST_FOLLOW_FOLLOW]	[TT_LABEL_DOMAIN_LOADS]	=	PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_2;
	table	[NT_LOAD_PATTERN_FOLLOW]	[TT_VALUE_SEPARATOR]		=	PR_LOAD_PATTERN_FOLLOW_1;
	table	[NT_LOAD_PATTERN_FOLLOW]	[TT_ARRAY_CLOSE]		=	PR_LOAD_PATTERN_FOLLOW_2;
	table	[NT_LOAD_PATTERNS_LIST_FOLLOW]	[TT_OBJECT_CLOSE]		=	PR_LOAD_PATTERNS_LIST_FOLLOW_1;
} 


enum FemJsonParser::TerminalTokens FemJsonParser::lexerReturnProcedures(TerminalTokens tt)
{
	switch(tt)
	{
		case TT_TEXT_STRING:
			temp_token.assign(tok+1,pos-tok-2);
			return TT_TEXT_STRING;
			break;

		case TT_NATURAL_NUMBER:
			temp_token.assign(tok,pos-tok);
			return TT_NATURAL_NUMBER;
			break;

		case TT_FLOAT_NUMBER:
			temp_token.assign(tok,pos-tok);
			return TT_FLOAT_NUMBER;
			break;

		case TT_OBJECT_OPEN:
			return TT_OBJECT_OPEN;
			break;
		case TT_OBJECT_CLOSE:
			return TT_OBJECT_CLOSE;
			break;
		case TT_ARRAY_OPEN:
			return TT_ARRAY_OPEN;
			break;
		case TT_ARRAY_CLOSE:
			return TT_ARRAY_CLOSE;
			break;
		case TT_NAME_SEPARATOR:
			return TT_NAME_SEPARATOR;
			break;
		case TT_VALUE_SEPARATOR:
			return TT_VALUE_SEPARATOR;
			break;
		case TT_TRUE:
			temp_bool = true;
			return TT_TRUE;
			break;
		case TT_FALSE:
			temp_bool = false;
			return TT_FALSE;
			break;
		case TT_NULL:
			return TT_NULL;
			break;

		case TT_LABEL_LABEL:
			return TT_LABEL_LABEL;
			break;

		case TT_LABEL_FEM:
			return TT_LABEL_FEM;
			break;

		case TT_LABEL_VERSION:
			return TT_LABEL_VERSION;
			break;
		case TT_LABEL_V1_0:
			return TT_LABEL_V1_0;
			break;
		case TT_LABEL_TYPE:
			return TT_LABEL_TYPE;
			break;
		case TT_LABEL_3D_SOLID:
			return TT_LABEL_3D_SOLID;
			break;
		case TT_LABEL_MATERIALS:
			return TT_LABEL_MATERIALS;
			break;
		case TT_LABEL_E:
			return TT_LABEL_E;
			break;
		case TT_LABEL_NU:
			return TT_LABEL_NU;
			break;
		case TT_LABEL_FY:
			return TT_LABEL_FY;
			break;
		case TT_LABEL_LINEAR_ELASTIC:
			return TT_LABEL_LINEAR_ELASTIC;
			break;
		case TT_LABEL_NODES:
			return TT_LABEL_NODES;
			break;
		case TT_LABEL_ELEMENTS:
			return TT_LABEL_ELEMENTS;
			break;
		case TT_LABEL_TETRAHEDRON4:
			return TT_LABEL_TETRAHEDRON4;
			break;
		case TT_LABEL_TETRAHEDRON10:
			return TT_LABEL_TETRAHEDRON10;
			break;
		case TT_LABEL_HEXAHEDRON8:
			return TT_LABEL_HEXAHEDRON8;
			break;
		case TT_LABEL_HEXAHEDRON20:
			return TT_LABEL_HEXAHEDRON20;
			break;
		case TT_LABEL_HEXAHEDRON27:
			return TT_LABEL_HEXAHEDRON27;
			break;
		case TT_LABEL_PRISM6:
			return TT_LABEL_PRISM6;
			break;
		case TT_LABEL_PRISM15:
			return TT_LABEL_PRISM15;
			break;
		case TT_LABEL_PRISM18:
			return TT_LABEL_PRISM18;
			break;
		case TT_LABEL_MATERIAL:
			return TT_LABEL_MATERIAL;
			break;
		case TT_LABEL_GROUPS:
			return TT_LABEL_GROUPS;
			break;
		case TT_LABEL_NODE_RESTRICTIONS:
			return TT_LABEL_NODE_RESTRICTIONS;
			break;
		case TT_LABEL_LOAD_PATTERNS:
			return TT_LABEL_LOAD_PATTERNS;
			break;
		case TT_LABEL_NODE:
			return TT_LABEL_NODE;
			break;
		case TT_LABEL_DX:
			return TT_LABEL_DX;
			break;
		case TT_LABEL_DY:
			return TT_LABEL_DY;
			break;
		case TT_LABEL_DZ:
			return TT_LABEL_DZ;
			break;
		case TT_LABEL_NODAL_LOADS:
			return TT_LABEL_NODAL_LOADS;
			break;
		case TT_LABEL_SURFACE_LOADS:
			return TT_LABEL_SURFACE_LOADS;
			break;
		case TT_LABEL_DOMAIN_LOADS:
			return TT_LABEL_DOMAIN_LOADS;
			break;
		case TT_LABEL_TRIANGLE3:
			return TT_LABEL_TRIANGLE3;
			break;
		case TT_LABEL_TRIANGLE6:
			return TT_LABEL_TRIANGLE6;
			break;
		case TT_LABEL_QUADRANGLE4:
			return TT_LABEL_QUADRANGLE4;
			break;
		case TT_LABEL_QUADRANGLE8:
			return TT_LABEL_QUADRANGLE8;
			break;
		case TT_LABEL_QUADRANGLE9:
			return TT_LABEL_QUADRANGLE9;
			break;
		case TT_LABEL_ELEMENT:
			return TT_LABEL_ELEMENT;
			break;
		case TT_LABEL_FORCE:
			return TT_LABEL_FORCE;
			break;

		case TT_EOF:
			return TT_EOF;
			break;
		default:
			return TT_UNKNOWN;
			break;
	}
}


void FemJsonParser::fill(std::istream &file)
{
	if(file.good())
	{
		// move the remaining unprocessed buffer to the start
		char count = limit - tok;
		memcpy(buffer,tok,count);
		pos = &buffer[pos - tok];
		marker = &buffer[marker - tok];
		tok = buffer;

		// fill the vacant space
		file.read(buffer + count, 1024-count-1);
		limit = buffer + count + file.gcount();
		*limit = '\000';
	}
}


