/* Generated by re2c 0.13.5 on Fri Nov  6 17:46:44 2009 */
#line 1 "ProgramOptions.c++.re2c"
#include "ProgramOptions.h++"

#include <sys/stat.h>
#include <stdlib.h>
#include <string.h>

#include <vector>
#include <string>



Option::Option()
{
}


Option::~Option()
{
}


void Option::setOption(double value, Level level)
{
	this->option_level = level;
	this->type = VAL_NUMBER;
	this->value.number = value;
}


void Option::setOption(std::string value, Level level)
{
	this->option_level = level;
	this->type = VAL_STRING;
	this->text = value;
}


void Option::setOption(bool value, Level level)
{
	this->option_level = level;
	this->type = VAL_BOOL;
	this->value.b = value;
}


double Option::getNumber()	
{
	 return value.number; 
}


std::string Option::getString()	
{
	 return text; 
}


bool Option::getBool()		
{
	 return value.b; 
}


ProgramOptions::ProgramOptions()
{
	option_level = Option::OPT_DEFAULT;
}


ProgramOptions::~ProgramOptions()
{
}


void ProgramOptions::setOption(const std::string option, long int value)
{
	Option op;
	op.setOption((double)value, option_level);
	options_list[option] = op;
}


void ProgramOptions::setOption(const std::string option, double value)
{
	Option op;
	op.setOption(value, option_level);
	options_list[option] = op;
}


void ProgramOptions::setOption(const std::string option, std::string value)
{
	Option op;
	op.setOption(value, option_level);
	options_list[option] = op;
}


void ProgramOptions::setOption(const std::string option, bool value)
{
	Option op;
	op.setOption(value, option_level);
	options_list[option] = op;
}


bool ProgramOptions::wasSet(const std::string text) const
{
	return (options_list.find(text) != options_list.end());
}


bool ProgramOptions::getOption(const std::string op, long int &val, long int default_value)
{
	std::map<std::string, class Option>::iterator it;
	it = options_list.find(op);
	if(it != options_list.end())
	{
		if( it->second.isNumber())
		{
			val = (long int)it->second.getNumber();
			return true;
		}
		else
		{
			std::cerr << "option " << op << " isn't a number" << std::endl;
			val = default_value;
			return false;
		}
	}
	else
	{
		std::cerr << "option " << op << " wasn't set" << std::endl;
		val = default_value;
		return false;
	}
}


bool ProgramOptions::getOption(const std::string op, double &val, double default_value)
{
	std::map<std::string, class Option>::iterator it;
	it = options_list.find(op);
	if(it != options_list.end())
	{
		if( it->second.isNumber())
		{
			val = it->second.getNumber();
			return true;
		}
		else
		{
			std::cerr << "option " << op << " isn't a float" << std::endl;
			val = default_value;
			return false;
		}
	}
	else
	{
		std::cerr << "option " << op << " wasn't set" << std::endl;
		val = default_value;
		return false;
	}
}


bool ProgramOptions::getOption(const std::string op, std::string &val, std::string default_value)
{
	std::map<std::string, class Option>::iterator it;
	it = options_list.find(op);
	if(it != options_list.end())
	{
		if( it->second.isString())
		{
			val = it->second.getString();
			return true;
		}
		else
		{
			std::cerr << "option " << op << " isn't a text" << std::endl;
			val = default_value;
			return false;
		}
	}
	else
	{
		std::cerr << "option " << op << " wasn't set" << std::endl;
		val = default_value;
		return false;
	}
}


bool ProgramOptions::getOption(const std::string op, bool &val, bool default_value)
{
	std::map<std::string, class Option>::iterator it;
	it = options_list.find(op);
	if(it != options_list.end())
	{
		if( it->second.isBool())
		{
			val = it->second.getBool();
			return true;
		}
		else
		{
			std::cerr << "option " << op << " isn't a bool" << std::endl;
			val = default_value;
			return false;
		}
	}
	else
	{
		std::cerr << "option " << op << " wasn't set" << std::endl;
		val = default_value;
		return false;
	}
}


std::ostream& operator << (std::ostream& os, ProgramOptions &prog)
{
	/*TODO implement this */
	std::map<std::string, Option>::iterator it;
	for(it = prog.options_list.begin(); it != prog.options_list.end(); it++)
	{
		os << (*it).first << " = ";
		switch( (*it).second.type)
		{	
			case Option::VAL_NUMBER:
				os << (*it).second.value.number << std::endl;
				break;

			case Option::VAL_STRING:
				os << "\"" << (*it).second.text << "\"" << std::endl;
				break;

			case Option::VAL_BOOL:
				os << ( (*it).second.value.b ? "true": "false") << std::endl;
				break;


			default:
				/* this section is never reached */
				break;
		}
	}
	return os;
}

int ProgramOptions::importFile(std::istream &is, std::string prefix)
{
	Parser *p = new Parser();

	switch(p->parse(*this, is, prefix))
	{
		case 0:
			break;

		default:
			/*TODO implement error handling */
			break;
	}

	delete p;
	return 0;
}


ProgramOptions::Parser::Parser()
{
	buffer[0] = '\0';
	pos = tok = lim = buffer;
	lex_state = 0;
	value.number = 0;
}


ProgramOptions::Parser::~Parser()
{
}


void ProgramOptions::Parser::fill(std::istream &is)
{
	// move the remaining unprocessed buffer to the start
	if(lim-tok > 0 )
	{
		memcpy(buffer,tok,lim-tok);
		pos = buffer + (pos - tok);
	}
	else
	{
		pos = buffer;
	}
	tok = buffer;

	// fill the vacant space
	is.read(buffer + (lim-tok), 1024-(lim-buffer));
	lim = buffer + is.gcount();
}


enum ProgramOptions::Parser::LEXER_TOKENS ProgramOptions::Parser::lexer(std::istream &is)
{
	std::string tmp;
	if(is.bad())
		return LEX_STREAM_ERROR;

std:
	tok = pos;
	#define YYFILL(n) { if(is.eof()){ if(tok == lim) return LEX_EOF; }else fill(is); }
	#define CP { tmp.clear(); tmp.append(tok,pos-tok); }
	#define CPo { text.clear(); text.append(tok,pos-tok); }
	#define CPs { text.clear(); text.append(tok+1,pos-tok-2); }

	switch(lex_state)
	{
		case 0:	// starting
		{
	/*!re2c
	re2c:yyfill:enable   	= 1;
	re2c:define:YYCTYPE  	= "char";
	re2c:define:YYCURSOR 	= pos;
	re2c:define:YYMARKER 	= marker;
	re2c:define:YYLIMIT	= lim;

	option	= [a-zA-Z][a-zA-Z0-9_]*;
	integer = "-"? ("0"|[1-9][0-9]*);
	float	= integer "." [0-9]+([eE][+-]?[0-9]+)?;
	number	= integer|float;
	string	= '"' [a-zA-Z0-9]* '"';
	indent	= [\t];

	'.'	{ return LEX_OPTION_SEPARATOR; }
	'='	{ lex_state = 1; return LEX_OPTION_ASSIGN; }
	indent	{ return LEX_INDENT; }
	option	{ CPo; return LEX_OPTION_NAME; }
	'\n'	{ return LEX_EOL; }
	' '+	{ goto std;}
	.	{ return LEX_UNKNOWN_TOKEN; }
	*/
	}
	break;

	case 1:	// only parses values
	{
	/*!re2c
	number	{ CP; value.number = atof(tmp.c_str()); return LEX_NUMBER; }
	string	{ CPs; return LEX_STRING; }
	"true"	{ value.b = true; return LEX_BOOL; }
	"false"	{ value.b = false; return LEX_BOOL; }
	'\n'	{ lex_state = 0; return LEX_EOL; }
	' '+	{ goto std;}
	.	{ return LEX_UNKNOWN_TOKEN; }
	*/
	}
	break;
	}
	#undef YYFILL
	#undef CP
	#undef CPo
	#undef CPs
	return LEX_ERROR;
}


int ProgramOptions::Parser::parse(ProgramOptions &op, std::istream &is, std::string prefix )
{
	using namespace std;

	#define WARN() {cerr << "ProgramOptions::Parser error at line "<< line << ", state " << state << " defaulted" << std::endl; state = 20;}

	int state = 0;
	enum LEXER_TOKENS token = LEX_UNKNOWN_TOKEN;
	vector<string> opname;
	string temp;
	vector<string>::iterator it;
	size_t line = 1;
	
	do {
		token = lexer(is);
		switch(state)
		{
			case 0:	// starting point
				switch(token)
				{
					case LEX_EOL:
						line++;
						break;

					case LEX_OPTION_NAME:
						opname.push_back(text);
						state = 1;	// object pushed
						break;

					case LEX_EOF:
						/*TODO implement decent return codes */
						return 0;
						break;

					default:
						WARN();
						break;
				}
				break;

			case 1:	// object pushed
				switch(token)
				{
					case LEX_OPTION_SEPARATOR:
						state = 2;	// waiting for object name
						break;

					case LEX_OPTION_ASSIGN:
						state = 3;	// waiting for option's value
						break;

					default:
						WARN();
						break;
				}
				break;

			case 2:	// waiting for object name
				switch(token)
				{
					case LEX_OPTION_NAME:
						opname.push_back(text);
						state = 1;	// object pushed
						break;

					default:
						WARN();
						break;
				}
				break;

			case 3:	// waiting for option's value
				temp.clear();
				if(!prefix.empty())
				{
					temp = prefix;
					if(!opname.empty()) 
						temp += ".";
				}
				// generate string with full option name
				it = opname.begin();
				temp += *it;
				for(it++; it != opname.end(); it++)
				{
					temp += "." + *it;
				}
				switch(token)
				{
					case LEX_NUMBER:
						state = 5;	// wait for EOL before committing float
						break;

					case LEX_STRING:
						state = 6;	// wait for EOL before committing string
						break;

					case LEX_BOOL:
						state = 7;	// wait for EOL before committing bool
						break;

					default:
						WARN();
						break;
				}
				break;


			case 5:	// wait for EOL before committing float
				switch(token)
				{
					case LEX_EOL:
						line++;
						op.setOption(temp, value.number);
						temp.clear();
						opname.clear();	//TODO implement support the compact format
						state = 0;
						break;

					case LEX_EOF:
						op.setOption(temp, value.number);
						return 0;	//TODO implement support the compact format
						break;

					default:
						WARN();
						break;
				}
				break;

			case 6:	// wait for EOL before committing string
				switch(token)
				{
					case LEX_EOL:
						line++;
						op.setOption(temp, text);
						temp.clear();
						opname.clear();	//TODO implement support the compact format
						state = 0;
						break;

					case LEX_EOF:
						op.setOption(temp, text);
						return 0;	//TODO implement support the compact format
					default:
						WARN();
						break;
				}
				break;

			case 7:	// wait for EOL before committing bool
				switch(token)
				{
					case LEX_EOL:
						line++;
						op.setOption(temp, value.b);
						temp.clear();
						opname.clear();	//TODO implement support the compact format
						state = 0;
						break;

					case LEX_EOF:
						op.setOption(temp, value.b);
						return 0;	//TODO implement support the compact format
					default:
						WARN();
						break;
				}
				break;

			case 20:	// wait until EOL
				switch(token)
				{
					case LEX_EOL:
						line++;
					case LEX_EOF:
						state = 0;
						break;

					default:
						break;
				}
				break;

			default:
				WARN();
				break;
		}
	} while ((token != LEX_EOF) && (token != LEX_STREAM_ERROR));

	/*TODO set a decent return code */
	return 0;
	#undef WARN
}
