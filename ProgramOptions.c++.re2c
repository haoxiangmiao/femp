/* Generated by re2c 0.13.5 on Fri Nov  6 17:46:44 2009 */
#line 1 "ProgramOptions.c++.re2c"
#include "ProgramOptions.h++"

#include <sys/stat.h>
#include <stdlib.h>
#include <string.h>



ProgramOptions::Option::Option()
{
}


ProgramOptions::Option::~Option()
{
}


void ProgramOptions::Option::setOption(long int value, OPTIONS_LEVEL level)
{
	this->option_level = level;
	this->type = VAL_INTEGER;
	this->value.integer = value;
}


void ProgramOptions::Option::setOption(double value, OPTIONS_LEVEL level)
{
	this->option_level = level;
	this->type = VAL_FLOAT;
	this->value.fp = value;
}


void ProgramOptions::Option::setOption(std::string value, OPTIONS_LEVEL level)
{
	this->option_level = level;
	this->type = VAL_STRING;
	this->value.text = value.c_str();
}


ProgramOptions::ProgramOptions()
{
	option_level = Option::OPT_DEFAULT;
}


ProgramOptions::~ProgramOptions()
{
}


void ProgramOptions::loadOptionsFromFile(std::string file, Option::OPTIONS_LEVEL level, std::string prefix)
{
	struct stat buffer;

	if(file.empty())
		return;
	/* check if system directory exists */
	if(stat(file.c_str(), &buffer) != 0)
		std::cerr << file << " doesn't exist" << std::endl;

	/*TODO load options from file */
}


void ProgramOptions::setOption(std::string option, long int value, Option::OPTIONS_LEVEL level)
{
	Option op;
	op.setOption(value, level);
	options_list[option] = op;
}


void ProgramOptions::setOption(std::string option, double value, Option::OPTIONS_LEVEL level)
{
	Option op;
	op.setOption(value, level);
	options_list[option] = op;
}


void ProgramOptions::setOption(std::string option, std::string value, Option::OPTIONS_LEVEL level)
{
	Option op;
	op.setOption(value, level);
	options_list[option] = op;
}


std::ostream& operator << (std::ostream& os, ProgramOptions &prog)
{
	/*TODO implement this */
	std::map<std::string, ProgramOptions::Option>::iterator it;
	for(it = prog.options_list.begin(); it != prog.options_list.end(); it++)
	{
		os << (*it).first << " = ";
		switch( (*it).second.type)
		{	
			case ProgramOptions::Option::VAL_INTEGER:
				os << (*it).second.value.integer << std::endl;
				break;

			case ProgramOptions::Option::VAL_FLOAT:
				os << (*it).second.value.fp << std::endl;
				break;

			case ProgramOptions::Option::VAL_STRING:
				os << "\"" << (*it).second.value.text << "\"" << std::endl;
				break;

			default:
				/* this section is never reached */
				break;
		}
	}
	return os;
}


ProgramOptions::Parser::Parser()
{
	buffer[0] = '\0';
	pos = tok = lim = buffer;
	value.integer = 0;
}


ProgramOptions::Parser::~Parser()
{
}


void ProgramOptions::Parser::fill(std::istream &is)
{
	// move the remaining unprocessed buffer to the start
	if(lim-tok > 0 )
	{
		memcpy(buffer,tok,lim-tok);
		pos = buffer + (pos - tok);
	}
	else
	{
		pos = buffer;
	}
	tok = buffer;

	// fill the vacant space
	is.read(buffer + (lim-tok), 1024-(lim-buffer));
	lim = buffer + is.gcount();
}


enum ProgramOptions::Parser::LEXER_TOKENS ProgramOptions::Parser::lexer(std::istream &is)
{
	char *tmp;
	if(is.bad())
		return LEX_STREAM_ERROR;

std:
	tok = pos;
	#define YYFILL(n) { std::cout << "\nfill\n"; if(is.eof()) return LEX_EOF; else fill(is); }
	#define CP { tmp = new char [pos-tok+1] ; strncpy(tmp,tok,pos-tok); }
	#define CPo { value.text = new char [pos-tok+1] ; strncpy(value.text,tok,pos-tok); }
	#define CPs { value.text = new char [pos-tok+1] ; strncpy(value.text,tok+1,pos-tok-2); }
	/*!re2c
	re2c:yyfill:enable   	= 1;
	re2c:define:YYCTYPE  	= "char";
	re2c:define:YYCURSOR 	= pos;
	re2c:define:YYMARKER 	= marker;
	re2c:define:YYLIMIT	= lim;

	integer = "-"? ("0"|[1-9][0-9]*);
	option	= [a-zA-Z]+;
	float	= integer "." [0-9]+([eE][+-]?[0-9]+)?;
	string	= '"' [a-zA-Z0-9]* '"';

	'.'	{ return LEX_OPTION_SEPARATOR; }
	'='	{ return LEX_OPTION_ASSIGN; }
	option	{ CPo; return LEX_OPTION_NAME; }
	integer	{ CP; value.integer = atoi(tmp); delete [] tmp; return LEX_INTEGER; }
	float	{ CP; value.fp = atof(tmp); delete [] tmp; return LEX_FLOAT; }
	string	{ CPs; return LEX_STRING; }
	'\n'	{ return LEX_EOL; }
	' '+	{ goto std;}
	.	{ return LEX_UNKNOWN_TOKEN; }
	*/
	#undef YYFILL(n)
	#undef CP
	#undef CPo
	#undef CPs
	return LEX_ERROR;
}


int ProgramOptions::Parser::parse(ProgramOptions &op, std::istream &is)
{
	/*
	enum LEXER_TOKENS token;
	using namespace std;
	do {
		token = lexer(is);
		switch(token)
		{
			case Parser::LEX_OPTION_NAME:
				cout << "<o>"<< value.text;
				delete [] value.text;
				break;

			case Parser::LEX_OPTION_SEPARATOR:
				cout << ".";
				break;

			case Parser::LEX_OPTION_ASSIGN:
				cout << "=";
				break;

			case Parser::LEX_INTEGER:
				cout << "<i>" << value.integer ;
				break;

			case Parser::LEX_FLOAT:
				cout << "<fp>" << value.fp;
				break;

			case Parser::LEX_STRING:
				cout << "<s>\"" << value.text << "\"";
				delete [] value.text;
				break;

			case Parser::LEX_EOL:
				cout << "EOL\n";
				break;

			case Parser::LEX_EOF:
				cout << "EOF\n";
				break;

			default:
				cout << "defaulted ";
				break;
		}
	} while ( (token != Parser::LEX_EOF) && (token != Parser::LEX_STREAM_ERROR));
	*/
}
